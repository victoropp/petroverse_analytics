{
  "permissions": {
    "allow": [
      "Bash(python:*)",
      "Bash(set PORT=3004)",
      "Bash(npm run dev:*)",
      "Bash(curl:*)",
      "Bash(start http://localhost:3004)",
      "Bash(uvicorn:*)",
      "Bash(npm install:*)",
      "Bash(start http://localhost:3003)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git rm:*)",
      "Bash(git commit:*)",
      "Bash(gh repo create:*)",
      "Bash(git push:*)",
      "Bash(start http://localhost:3001)",
      "Bash(pip install:*)",
      "Bash(timeout:*)",
      "Bash(net start:*)",
      "Bash(sc query:*)",
      "Bash(powershell:*)",
      "Bash(where psql)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\pg_ctl\" status -D \"C:\\Program Files\\PostgreSQL\\17\\data\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\pg_ctl\" start -D \"C:\\Program Files\\PostgreSQL\\17\\data\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -c \"SELECT version();\")",
      "Read(/C:\\Program Files\\PostgreSQL\\17\\data/**)",
      "Read(/C:\\Program Files\\PostgreSQL\\17\\data/**)",
      "Read(/C:\\Program Files\\PostgreSQL\\17\\data/**)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5434 -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\pg_ctl\" stop -D \"C:\\Program Files\\PostgreSQL\\17\\data\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\pg_ctl\" reload -D \"C:\\Program Files\\PostgreSQL\\17\\data\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -c \"\\l petroverse_analytics\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -c \"CREATE DATABASE petroverse_analytics;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -f databaseschema.sql)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"\\dt *.*\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -f schema.sql)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"CREATE SCHEMA IF NOT EXISTS petroverse;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"\\dt petroverse_core.*\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"SELECT * FROM petroverse_core.tenants;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"SELECT COUNT(*) FROM petroverse_core.users;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"\\dt petroverse.*\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5434 -c \"\\l\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5434 -d petroverse_analytics -c \"\\dt petroverse.*\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5434 -d petroverse_analytics -c \"\\dt\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5434 -d bidec_erp -c \"\\dt\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5434 -c \"DROP DATABASE IF EXISTS petroverse_analytics;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"CREATE SCHEMA petroverse;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"\nCREATE TABLE IF NOT EXISTS petroverse.companies (\n    company_id SERIAL PRIMARY KEY,\n    company_name VARCHAR(255) UNIQUE NOT NULL,\n    company_type VARCHAR(50),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE IF NOT EXISTS petroverse.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) UNIQUE NOT NULL,\n    product_category VARCHAR(50),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE IF NOT EXISTS petroverse.time_dimension (\n    date_id SERIAL PRIMARY KEY,\n    full_date DATE UNIQUE NOT NULL,\n    year INTEGER,\n    month INTEGER,\n    quarter INTEGER,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE IF NOT EXISTS petroverse.performance_metrics (\n    metric_id SERIAL PRIMARY KEY,\n    company_id INTEGER REFERENCES petroverse.companies(company_id),\n    product_id INTEGER REFERENCES petroverse.products(product_id),\n    date_id INTEGER REFERENCES petroverse.time_dimension(date_id),\n    volume_liters DECIMAL(15,2),\n    volume_mt DECIMAL(15,6),\n    tenant_id UUID,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"\nSELECT \n    schemaname,\n    tablename,\n    (SELECT COUNT(*) FROM pg_catalog.pg_class c WHERE c.relname = tablename) as exists\nFROM pg_tables \nWHERE schemaname IN (''petroverse'', ''petroverse_core'')\nORDER BY schemaname, tablename;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"\nSELECT \n    ''petroverse.companies'' as table_name, COUNT(*) as row_count FROM petroverse.companies\nUNION ALL\nSELECT ''petroverse.products'', COUNT(*) FROM petroverse.products  \nUNION ALL\nSELECT ''petroverse.performance_metrics'', COUNT(*) FROM petroverse.performance_metrics\nUNION ALL\nSELECT ''petroverse.time_dimension'', COUNT(*) FROM petroverse.time_dimension\nUNION ALL\nSELECT ''petroverse_core.users'', COUNT(*) FROM petroverse_core.users\nUNION ALL\nSELECT ''petroverse_core.tenants'', COUNT(*) FROM petroverse_core.tenants;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"\n-- Create BDC table\nCREATE TABLE IF NOT EXISTS petroverse.bdc_data (\n    id SERIAL PRIMARY KEY,\n    source_file VARCHAR(255),\n    sheet_name VARCHAR(100),\n    extraction_date DATE,\n    year INTEGER,\n    month INTEGER,\n    period_date DATE,\n    period_type VARCHAR(50),\n    company_name VARCHAR(255),\n    product_code VARCHAR(100),\n    product_original_name VARCHAR(255),\n    unit_type VARCHAR(50),\n    volume DECIMAL(15,2),\n    volume_liters DECIMAL(15,2),\n    volume_kg DECIMAL(15,2),\n    volume_mt DECIMAL(15,6),\n    company_type VARCHAR(50),\n    product VARCHAR(100),\n    data_quality_score DECIMAL(3,2),\n    is_outlier BOOLEAN,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create OMC table  \nCREATE TABLE IF NOT EXISTS petroverse.omc_data (\n    id SERIAL PRIMARY KEY,\n    source_file VARCHAR(255),\n    sheet_name VARCHAR(100),\n    extraction_date DATE,\n    year INTEGER,\n    month INTEGER,\n    period_date DATE,\n    period_type VARCHAR(50),\n    company_name VARCHAR(255),\n    product_code VARCHAR(100),\n    product_original_name VARCHAR(255),\n    unit_type VARCHAR(50),\n    volume DECIMAL(15,2),\n    volume_liters DECIMAL(15,2),\n    volume_kg DECIMAL(15,2),\n    volume_mt DECIMAL(15,6),\n    company_type VARCHAR(50),\n    product VARCHAR(100),\n    data_quality_score DECIMAL(3,2),\n    is_outlier BOOLEAN,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create Supply table\nCREATE TABLE IF NOT EXISTS petroverse.supply_data (\n    id SERIAL PRIMARY KEY,\n    year INTEGER,\n    month INTEGER,\n    region VARCHAR(100),\n    product VARCHAR(255),\n    unit VARCHAR(50),\n    quantity_original DECIMAL(15,2),\n    company_type VARCHAR(100),\n    period_date DATE,\n    data_quality_score DECIMAL(3,2),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"\\COPY petroverse.bdc_data(source_file, company_name, company_type, product, product_code, year, month, volume_liters, volume_kg, volume_mt, data_quality_score, is_outlier) FROM ''C:\\Users\\victo\\Documents\\Data_Science_Projects\\petroverse_analytics\\data\\cleaned_bdc_data.csv'' WITH CSV HEADER\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"\\COPY petroverse.omc_data(source_file, company_name, company_type, product, product_code, year, month, volume_liters, volume_kg, volume_mt, data_quality_score, is_outlier) FROM ''C:\\Users\\victo\\Documents\\Data_Science_Projects\\petroverse_analytics\\data\\cleaned_omc_data.csv'' WITH CSV HEADER\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"\\COPY petroverse.supply_data(year, month, region, product, unit, quantity_original, company_type, data_quality_score) FROM ''C:\\Users\\victo\\Documents\\Data_Science_Projects\\petroverse_analytics\\data\\cleaned_supply_data.csv'' WITH CSV HEADER\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"\nALTER TABLE petroverse.supply_data \nADD COLUMN IF NOT EXISTS source_file VARCHAR(255),\nADD COLUMN IF NOT EXISTS product_name_clean VARCHAR(255),\nADD COLUMN IF NOT EXISTS product_category VARCHAR(100),\nADD COLUMN IF NOT EXISTS company_name_clean VARCHAR(255),\nADD COLUMN IF NOT EXISTS is_outlier BOOLEAN;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"\\COPY petroverse.supply_data(year, month, region, product, unit, quantity_original, company_type, source_file, product_name_clean, product_category, company_name_clean, data_quality_score, is_outlier) FROM ''C:\\Users\\victo\\Documents\\Data_Science_Projects\\petroverse_analytics\\data\\cleaned_supply_data.csv'' WITH CSV HEADER\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"\nSELECT \n    ''petroverse.bdc_data'' as table_name, \n    COUNT(*) as records,\n    MIN(year) || ''-'' || MAX(year) as year_range,\n    COUNT(DISTINCT company_name) as unique_companies,\n    COUNT(DISTINCT product) as unique_products\nFROM petroverse.bdc_data\nUNION ALL\nSELECT \n    ''petroverse.omc_data'',\n    COUNT(*),\n    MIN(year) || ''-'' || MAX(year),\n    COUNT(DISTINCT company_name),\n    COUNT(DISTINCT product)\nFROM petroverse.omc_data\nUNION ALL\nSELECT \n    ''petroverse.supply_data'',\n    COUNT(*),\n    MIN(year) || ''-'' || MAX(year),\n    COUNT(DISTINCT company_name_clean),\n    COUNT(DISTINCT product)\nFROM petroverse.supply_data;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"\nSELECT \n    table_schema,\n    table_name,\n    column_name,\n    data_type\nFROM information_schema.columns\nWHERE table_schema = ''petroverse''\nORDER BY table_name, ordinal_position;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -d petroverse_analytics -c \"\n-- First clear existing dimension tables\nTRUNCATE TABLE petroverse.companies CASCADE;\nTRUNCATE TABLE petroverse.products CASCADE;\nTRUNCATE TABLE petroverse.time_dimension CASCADE;\n\n-- Populate companies dimension from existing data\nINSERT INTO petroverse.companies (company_name, company_type)\nSELECT DISTINCT company_name, company_type \nFROM (\n    SELECT company_name, company_type FROM petroverse.bdc_data WHERE company_name IS NOT NULL\n    UNION\n    SELECT company_name, company_type FROM petroverse.omc_data WHERE company_name IS NOT NULL\n) combined\nON CONFLICT (company_name) DO NOTHING;\n\nSELECT COUNT(*) as companies_count FROM petroverse.companies;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\initdb\" -D \"C:\\PostgreSQL_Data\\petroverse_data\" -U postgres)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\pg_ctl\" start -D \"C:\\PostgreSQL_Data\\petroverse_data\" -l \"C:\\PostgreSQL_Data\\petroverse_data\\logfile\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -c \"CREATE DATABASE petroverse_analytics;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\pg_dump\" -U postgres -p 5434 -d petroverse_analytics --schema-only -f petroverse_schema_backup.sql)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\pg_dump\" -U postgres -p 5434 -d petroverse_analytics --data-only -f petroverse_data_backup.sql)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -f petroverse_schema_backup.sql)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\\dt petroverse.*\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Populate companies dimension from existing data\nINSERT INTO petroverse.companies (company_name, company_type)\nSELECT DISTINCT company_name, company_type \nFROM (\n    SELECT company_name, company_type FROM petroverse.bdc_data WHERE company_name IS NOT NULL\n    UNION\n    SELECT company_name, company_type FROM petroverse.omc_data WHERE company_name IS NOT NULL\n    UNION \n    SELECT company_name_clean as company_name, company_type FROM petroverse.supply_data WHERE company_name_clean IS NOT NULL\n) combined\nON CONFLICT (company_name) DO NOTHING;\n\nSELECT COUNT(*) as companies_count FROM petroverse.companies;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Populate products dimension\nINSERT INTO petroverse.products (product_name, product_category)\nSELECT DISTINCT product, \n       CASE \n           WHEN UPPER(product) LIKE ''%GASOLINE%'' OR UPPER(product) LIKE ''%PETROL%'' OR UPPER(product) LIKE ''%PMS%'' THEN ''Gasoline''\n           WHEN UPPER(product) LIKE ''%DIESEL%'' OR UPPER(product) LIKE ''%AGO%'' THEN ''Diesel''\n           WHEN UPPER(product) LIKE ''%LPG%'' OR UPPER(product) LIKE ''%GAS%'' THEN ''LPG''\n           WHEN UPPER(product) LIKE ''%KEROSENE%'' OR UPPER(product) LIKE ''%DPK%'' THEN ''Kerosene''\n           WHEN UPPER(product) LIKE ''%JET%'' OR UPPER(product) LIKE ''%ATK%'' THEN ''Aviation Fuel''\n           WHEN UPPER(product) LIKE ''%OIL%'' THEN ''Oil''\n           ELSE ''Other''\n       END as category\nFROM (\n    SELECT product FROM petroverse.bdc_data WHERE product IS NOT NULL\n    UNION\n    SELECT product FROM petroverse.omc_data WHERE product IS NOT NULL\n    UNION\n    SELECT product FROM petroverse.supply_data WHERE product IS NOT NULL\n) combined\nWHERE product IS NOT NULL\nON CONFLICT (product_name) DO NOTHING;\n\nSELECT COUNT(*) as products_count FROM petroverse.products;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Populate time dimension\nINSERT INTO petroverse.time_dimension (full_date, year, month, quarter)\nSELECT DISTINCT \n    DATE(CONCAT(year, ''-'', LPAD(month::text, 2, ''0''), ''-01'')) as full_date,\n    year,\n    month,\n    CEIL(month::numeric / 3) as quarter\nFROM (\n    SELECT year, month FROM petroverse.bdc_data WHERE year IS NOT NULL AND month IS NOT NULL\n    UNION\n    SELECT year, month FROM petroverse.omc_data WHERE year IS NOT NULL AND month IS NOT NULL\n    UNION\n    SELECT year, month FROM petroverse.supply_data WHERE year IS NOT NULL AND month IS NOT NULL\n) combined\nON CONFLICT (full_date) DO NOTHING;\n\nSELECT COUNT(*) as time_periods FROM petroverse.time_dimension;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Create BDC fact table with proper foreign keys\nCREATE TABLE IF NOT EXISTS petroverse.fact_bdc_transactions AS\nSELECT \n    b.id as transaction_id,\n    c.company_id,\n    p.product_id,\n    t.date_id,\n    b.volume_liters,\n    b.volume_mt,\n    b.volume_kg,\n    b.data_quality_score,\n    b.is_outlier,\n    b.source_file,\n    b.created_at\nFROM petroverse.bdc_data b\nLEFT JOIN petroverse.companies c ON b.company_name = c.company_name\nLEFT JOIN petroverse.products p ON b.product = p.product_name\nLEFT JOIN petroverse.time_dimension t ON (b.year = t.year AND b.month = t.month);\n\n-- Add primary key and constraints\nALTER TABLE petroverse.fact_bdc_transactions ADD CONSTRAINT pk_fact_bdc PRIMARY KEY (transaction_id);\n\nSELECT COUNT(*) as bdc_fact_records FROM petroverse.fact_bdc_transactions;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Create OMC fact table with proper foreign keys\nCREATE TABLE IF NOT EXISTS petroverse.fact_omc_transactions AS\nSELECT \n    o.id as transaction_id,\n    c.company_id,\n    p.product_id,\n    t.date_id,\n    o.volume_liters,\n    o.volume_mt,\n    o.volume_kg,\n    o.data_quality_score,\n    o.is_outlier,\n    o.source_file,\n    o.created_at\nFROM petroverse.omc_data o\nLEFT JOIN petroverse.companies c ON o.company_name = c.company_name\nLEFT JOIN petroverse.products p ON o.product = p.product_name\nLEFT JOIN petroverse.time_dimension t ON (o.year = t.year AND o.month = t.month);\n\n-- Add primary key and constraints\nALTER TABLE petroverse.fact_omc_transactions ADD CONSTRAINT pk_fact_omc PRIMARY KEY (transaction_id);\n\nSELECT COUNT(*) as omc_fact_records FROM petroverse.fact_omc_transactions;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Create views to match what the API expects\nCREATE OR REPLACE VIEW petroverse.bdc_performance_metrics AS\nSELECT \n    transaction_id as metric_id,\n    company_id,\n    product_id,\n    date_id,\n    volume_liters,\n    volume_mt,\n    volume_kg,\n    NULL::uuid as tenant_id,\n    created_at\nFROM petroverse.fact_bdc_transactions;\n\nCREATE OR REPLACE VIEW petroverse.omc_performance_metrics AS\nSELECT \n    transaction_id as metric_id,\n    company_id,\n    product_id,\n    date_id,\n    volume_liters,\n    volume_mt,\n    volume_kg,\n    NULL::uuid as tenant_id,\n    created_at\nFROM petroverse.fact_omc_transactions;\n\n-- Test the views\nSELECT COUNT(*) as bdc_metrics FROM petroverse.bdc_performance_metrics;\nSELECT COUNT(*) as omc_metrics FROM petroverse.omc_performance_metrics;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\nSELECT product_name, COUNT(*) as count\nFROM petroverse.products \nGROUP BY product_name \nORDER BY product_name;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Create a standardization mapping table\nCREATE TEMPORARY TABLE product_standardization AS\nWITH product_mapping AS (\n  SELECT \n    product_name as original_name,\n    CASE \n      -- Gasoline standardization\n      WHEN UPPER(product_name) IN (''GASOLINE'', ''GASOLINE (PREMIUM)'', ''PREMIUM GASOLINE'', ''REGULAR GASOLINE'') \n        THEN ''Gasoline''\n      \n      -- Diesel/Gas Oil standardization - using ''Gasoil'' as requested\n      WHEN UPPER(product_name) IN (''AUTOMOTIVE GAS OIL (DIESEL)'', ''GAS OIL (DIESEL)'', ''GASOIL'', ''GASOIL-CELL-SITE'', \n                                   ''GASOIL-MINES'', ''GASOIL-POWER-PLANT'', ''GASOIL-RIG'', ''MARINE GAS OIL'', \n                                   ''MARINE-GASOIL-FOREIGN'', ''MARINE-GASOIL-LOCAL'') \n        THEN ''Gasoil''\n      \n      -- LPG standardization\n      WHEN UPPER(product_name) IN (''LIQUEFIED PETROLEUM GAS (LPG)'', ''LPG'', ''LPG-BUTANE'', ''LPG-CRM'') \n        THEN ''LPG''\n      \n      -- Heavy Fuel Oil standardization\n      WHEN UPPER(product_name) IN (''HFO'', ''HFO-POWER'', ''RFO'', ''RFO-INDUSTRIAL'', ''FUEL OIL'') \n        THEN ''Heavy Fuel Oil''\n      \n      -- Naphtha standardization\n      WHEN UPPER(product_name) IN (''NAPHTHA'', ''NAPHTHA (UNIFIED)'') \n        THEN ''Naphtha''\n      \n      -- Keep unique products as is\n      WHEN UPPER(product_name) = ''ATK'' THEN ''Aviation Turbine Kerosene''\n      WHEN UPPER(product_name) = ''KEROSENE'' THEN ''Kerosene''\n      WHEN UPPER(product_name) = ''LUBRICANTS'' THEN ''Lubricants''\n      WHEN UPPER(product_name) = ''PREMIX'' THEN ''Premix''\n      \n      ELSE product_name\n    END as standard_name,\n    CASE \n      WHEN UPPER(product_name) LIKE ''%GASOLINE%'' OR UPPER(product_name) LIKE ''%PETROL%'' THEN ''Gasoline''\n      WHEN UPPER(product_name) LIKE ''%DIESEL%'' OR UPPER(product_name) LIKE ''%GASOIL%'' OR UPPER(product_name) LIKE ''%GAS OIL%'' THEN ''Gasoil''\n      WHEN UPPER(product_name) LIKE ''%LPG%'' THEN ''LPG''\n      WHEN UPPER(product_name) LIKE ''%HFO%'' OR UPPER(product_name) LIKE ''%RFO%'' OR UPPER(product_name) LIKE ''%FUEL OIL%'' THEN ''Heavy Fuel Oil''\n      WHEN UPPER(product_name) LIKE ''%KEROSENE%'' OR UPPER(product_name) LIKE ''%ATK%'' THEN ''Aviation & Kerosene''\n      WHEN UPPER(product_name) LIKE ''%NAPHTHA%'' THEN ''Naphtha''\n      WHEN UPPER(product_name) LIKE ''%LUBRICANT%'' THEN ''Lubricants''\n      ELSE ''Other Petroleum Products''\n    END as category\n  FROM petroverse.products\n)\nSELECT * FROM product_standardization;\n\n-- Show the mapping\nSELECT \n  original_name,\n  standard_name,\n  category,\n  COUNT(*) OVER (PARTITION BY standard_name) as products_to_merge\nFROM product_standardization \nORDER BY standard_name, original_name;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Show the standardization mapping\nWITH product_mapping AS (\n  SELECT \n    product_name as original_name,\n    CASE \n      -- Gasoline standardization\n      WHEN UPPER(product_name) IN (''GASOLINE'', ''GASOLINE (PREMIUM)'', ''PREMIUM GASOLINE'', ''REGULAR GASOLINE'') \n        THEN ''Gasoline''\n      \n      -- Diesel/Gas Oil standardization - using ''Gasoil'' as requested\n      WHEN UPPER(product_name) IN (''AUTOMOTIVE GAS OIL (DIESEL)'', ''GAS OIL (DIESEL)'', ''GASOIL'', ''GASOIL-CELL-SITE'', \n                                   ''GASOIL-MINES'', ''GASOIL-POWER-PLANT'', ''GASOIL-RIG'', ''MARINE GAS OIL'', \n                                   ''MARINE-GASOIL-FOREIGN'', ''MARINE-GASOIL-LOCAL'') \n        THEN ''Gasoil''\n      \n      -- LPG standardization\n      WHEN UPPER(product_name) IN (''LIQUEFIED PETROLEUM GAS (LPG)'', ''LPG'', ''LPG-BUTANE'', ''LPG-CRM'') \n        THEN ''LPG''\n      \n      -- Heavy Fuel Oil standardization\n      WHEN UPPER(product_name) IN (''HFO'', ''HFO-POWER'', ''RFO'', ''RFO-INDUSTRIAL'', ''FUEL OIL'') \n        THEN ''Heavy Fuel Oil''\n      \n      -- Naphtha standardization\n      WHEN UPPER(product_name) IN (''NAPHTHA'', ''NAPHTHA (UNIFIED)'') \n        THEN ''Naphtha''\n      \n      -- Keep unique products as is\n      WHEN UPPER(product_name) = ''ATK'' THEN ''Aviation Turbine Kerosene''\n      WHEN UPPER(product_name) = ''KEROSENE'' THEN ''Kerosene''\n      WHEN UPPER(product_name) = ''LUBRICANTS'' THEN ''Lubricants''\n      WHEN UPPER(product_name) = ''PREMIX'' THEN ''Premix''\n      \n      ELSE product_name\n    END as standard_name,\n    CASE \n      WHEN UPPER(product_name) LIKE ''%GASOLINE%'' OR UPPER(product_name) LIKE ''%PETROL%'' THEN ''Gasoline''\n      WHEN UPPER(product_name) LIKE ''%DIESEL%'' OR UPPER(product_name) LIKE ''%GASOIL%'' OR UPPER(product_name) LIKE ''%GAS OIL%'' THEN ''Gasoil''\n      WHEN UPPER(product_name) LIKE ''%LPG%'' THEN ''LPG''\n      WHEN UPPER(product_name) LIKE ''%HFO%'' OR UPPER(product_name) LIKE ''%RFO%'' OR UPPER(product_name) LIKE ''%FUEL OIL%'' THEN ''Heavy Fuel Oil''\n      WHEN UPPER(product_name) LIKE ''%KEROSENE%'' OR UPPER(product_name) LIKE ''%ATK%'' THEN ''Aviation & Kerosene''\n      WHEN UPPER(product_name) LIKE ''%NAPHTHA%'' THEN ''Naphtha''\n      WHEN UPPER(product_name) LIKE ''%LUBRICANT%'' THEN ''Lubricants''\n      ELSE ''Other Petroleum Products''\n    END as category\n  FROM petroverse.products\n)\nSELECT \n  original_name,\n  standard_name,\n  category,\n  COUNT(*) OVER (PARTITION BY standard_name) as products_to_merge\nFROM product_mapping \nORDER BY standard_name, original_name;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Step 1: Create standardized products table\nCREATE TABLE petroverse.products_standardized AS\nWITH product_mapping AS (\n  SELECT \n    product_name as original_name,\n    CASE \n      -- Gasoline standardization\n      WHEN UPPER(product_name) IN (''GASOLINE'', ''GASOLINE (PREMIUM)'', ''PREMIUM GASOLINE'', ''REGULAR GASOLINE'') \n        THEN ''Gasoline''\n      \n      -- Diesel/Gas Oil standardization - using ''Gasoil'' as requested\n      WHEN UPPER(product_name) IN (''AUTOMOTIVE GAS OIL (DIESEL)'', ''GAS OIL (DIESEL)'', ''GASOIL'', ''GASOIL-CELL-SITE'', \n                                   ''GASOIL-MINES'', ''GASOIL-POWER-PLANT'', ''GASOIL-RIG'', ''MARINE GAS OIL'', \n                                   ''MARINE-GASOIL-FOREIGN'', ''MARINE-GASOIL-LOCAL'') \n        THEN ''Gasoil''\n      \n      -- LPG standardization\n      WHEN UPPER(product_name) IN (''LIQUEFIED PETROLEUM GAS (LPG)'', ''LPG'', ''LPG-BUTANE'', ''LPG-CRM'') \n        THEN ''LPG''\n      \n      -- Heavy Fuel Oil standardization\n      WHEN UPPER(product_name) IN (''HFO'', ''HFO-POWER'', ''RFO'', ''RFO-INDUSTRIAL'', ''FUEL OIL'') \n        THEN ''Heavy Fuel Oil''\n      \n      -- Naphtha standardization\n      WHEN UPPER(product_name) IN (''NAPHTHA'', ''NAPHTHA (UNIFIED)'') \n        THEN ''Naphtha''\n      \n      -- Keep unique products as is\n      WHEN UPPER(product_name) = ''ATK'' THEN ''Aviation Turbine Kerosene''\n      WHEN UPPER(product_name) = ''KEROSENE'' THEN ''Kerosene''\n      WHEN UPPER(product_name) = ''LUBRICANTS'' THEN ''Lubricants''\n      WHEN UPPER(product_name) = ''PREMIX'' THEN ''Premix''\n      \n      ELSE product_name\n    END as standard_name,\n    CASE \n      WHEN UPPER(product_name) LIKE ''%GASOLINE%'' OR UPPER(product_name) LIKE ''%PETROL%'' THEN ''Gasoline''\n      WHEN UPPER(product_name) LIKE ''%DIESEL%'' OR UPPER(product_name) LIKE ''%GASOIL%'' OR UPPER(product_name) LIKE ''%GAS OIL%'' THEN ''Gasoil''\n      WHEN UPPER(product_name) LIKE ''%LPG%'' THEN ''LPG''\n      WHEN UPPER(product_name) LIKE ''%HFO%'' OR UPPER(product_name) LIKE ''%RFO%'' OR UPPER(product_name) LIKE ''%FUEL OIL%'' THEN ''Heavy Fuel Oil''\n      WHEN UPPER(product_name) LIKE ''%KEROSENE%'' OR UPPER(product_name) LIKE ''%ATK%'' THEN ''Aviation & Kerosene''\n      WHEN UPPER(product_name) LIKE ''%NAPHTHA%'' THEN ''Naphtha''\n      WHEN UPPER(product_name) LIKE ''%LUBRICANT%'' THEN ''Lubricants''\n      ELSE ''Other Petroleum Products''\n    END as category\n  FROM petroverse.products\n)\nSELECT DISTINCT\n  ROW_NUMBER() OVER (ORDER BY standard_name) as product_id,\n  standard_name as product_name,\n  category as product_category,\n  CURRENT_TIMESTAMP as created_at\nFROM product_mapping;\n\n-- Step 2: Show the new standardized products\nSELECT * FROM petroverse.products_standardized ORDER BY product_name;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Drop and recreate the standardized products table correctly\nDROP TABLE IF EXISTS petroverse.products_standardized;\n\nCREATE TABLE petroverse.products_standardized AS\nWITH product_mapping AS (\n  SELECT DISTINCT\n    CASE \n      -- Gasoline standardization\n      WHEN UPPER(product_name) IN (''GASOLINE'', ''GASOLINE (PREMIUM)'', ''PREMIUM GASOLINE'', ''REGULAR GASOLINE'') \n        THEN ''Gasoline''\n      \n      -- Diesel/Gas Oil standardization - using ''Gasoil'' as requested\n      WHEN UPPER(product_name) IN (''AUTOMOTIVE GAS OIL (DIESEL)'', ''GAS OIL (DIESEL)'', ''GASOIL'', ''GASOIL-CELL-SITE'', \n                                   ''GASOIL-MINES'', ''GASOIL-POWER-PLANT'', ''GASOIL-RIG'', ''MARINE GAS OIL'', \n                                   ''MARINE-GASOIL-FOREIGN'', ''MARINE-GASOIL-LOCAL'') \n        THEN ''Gasoil''\n      \n      -- LPG standardization\n      WHEN UPPER(product_name) IN (''LIQUEFIED PETROLEUM GAS (LPG)'', ''LPG'', ''LPG-BUTANE'', ''LPG-CRM'') \n        THEN ''LPG''\n      \n      -- Heavy Fuel Oil standardization\n      WHEN UPPER(product_name) IN (''HFO'', ''HFO-POWER'', ''RFO'', ''RFO-INDUSTRIAL'', ''FUEL OIL'') \n        THEN ''Heavy Fuel Oil''\n      \n      -- Naphtha standardization\n      WHEN UPPER(product_name) IN (''NAPHTHA'', ''NAPHTHA (UNIFIED)'') \n        THEN ''Naphtha''\n      \n      -- Keep unique products as is\n      WHEN UPPER(product_name) = ''ATK'' THEN ''Aviation Turbine Kerosene''\n      WHEN UPPER(product_name) = ''KEROSENE'' THEN ''Kerosene''\n      WHEN UPPER(product_name) = ''LUBRICANTS'' THEN ''Lubricants''\n      WHEN UPPER(product_name) = ''PREMIX'' THEN ''Premix''\n      \n      ELSE product_name\n    END as standard_name,\n    CASE \n      WHEN UPPER(product_name) LIKE ''%GASOLINE%'' OR UPPER(product_name) LIKE ''%PETROL%'' THEN ''Gasoline''\n      WHEN UPPER(product_name) LIKE ''%DIESEL%'' OR UPPER(product_name) LIKE ''%GASOIL%'' OR UPPER(product_name) LIKE ''%GAS OIL%'' THEN ''Gasoil''\n      WHEN UPPER(product_name) LIKE ''%LPG%'' THEN ''LPG''\n      WHEN UPPER(product_name) LIKE ''%HFO%'' OR UPPER(product_name) LIKE ''%RFO%'' OR UPPER(product_name) LIKE ''%FUEL OIL%'' THEN ''Heavy Fuel Oil''\n      WHEN UPPER(product_name) LIKE ''%KEROSENE%'' OR UPPER(product_name) LIKE ''%ATK%'' THEN ''Aviation & Kerosene''\n      WHEN UPPER(product_name) LIKE ''%NAPHTHA%'' THEN ''Naphtha''\n      WHEN UPPER(product_name) LIKE ''%LUBRICANT%'' THEN ''Lubricants''\n      ELSE ''Other Petroleum Products''\n    END as category\n  FROM petroverse.products\n)\nSELECT \n  ROW_NUMBER() OVER (ORDER BY standard_name) as product_id,\n  standard_name as product_name,\n  category as product_category,\n  CURRENT_TIMESTAMP as created_at\nFROM product_mapping;\n\n-- Show the final standardized products\nSELECT * FROM petroverse.products_standardized ORDER BY product_name;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Fix the LPG category issue and recreate\nDROP TABLE IF EXISTS petroverse.products_standardized;\n\nCREATE TABLE petroverse.products_standardized AS\nWITH unique_products AS (\n  SELECT DISTINCT\n    CASE \n      WHEN UPPER(product_name) IN (''GASOLINE'', ''GASOLINE (PREMIUM)'', ''PREMIUM GASOLINE'', ''REGULAR GASOLINE'') \n        THEN ''Gasoline''\n      WHEN UPPER(product_name) IN (''AUTOMOTIVE GAS OIL (DIESEL)'', ''GAS OIL (DIESEL)'', ''GASOIL'', ''GASOIL-CELL-SITE'', \n                                   ''GASOIL-MINES'', ''GASOIL-POWER-PLANT'', ''GASOIL-RIG'', ''MARINE GAS OIL'', \n                                   ''MARINE-GASOIL-FOREIGN'', ''MARINE-GASOIL-LOCAL'') \n        THEN ''Gasoil''\n      WHEN UPPER(product_name) IN (''LIQUEFIED PETROLEUM GAS (LPG)'', ''LPG'', ''LPG-BUTANE'', ''LPG-CRM'') \n        THEN ''LPG''\n      WHEN UPPER(product_name) IN (''HFO'', ''HFO-POWER'', ''RFO'', ''RFO-INDUSTRIAL'', ''FUEL OIL'') \n        THEN ''Heavy Fuel Oil''\n      WHEN UPPER(product_name) IN (''NAPHTHA'', ''NAPHTHA (UNIFIED)'') \n        THEN ''Naphtha''\n      WHEN UPPER(product_name) = ''ATK'' THEN ''Aviation Turbine Kerosene''\n      WHEN UPPER(product_name) = ''KEROSENE'' THEN ''Kerosene''\n      WHEN UPPER(product_name) = ''LUBRICANTS'' THEN ''Lubricants''\n      WHEN UPPER(product_name) = ''PREMIX'' THEN ''Premix''\n      ELSE product_name\n    END as standard_name\n  FROM petroverse.products\n)\nSELECT \n  ROW_NUMBER() OVER (ORDER BY standard_name) as product_id,\n  standard_name as product_name,\n  CASE \n    WHEN standard_name = ''Gasoline'' THEN ''Gasoline''\n    WHEN standard_name = ''Gasoil'' THEN ''Gasoil''\n    WHEN standard_name = ''LPG'' THEN ''LPG''\n    WHEN standard_name = ''Heavy Fuel Oil'' THEN ''Heavy Fuel Oil''\n    WHEN standard_name IN (''Aviation Turbine Kerosene'', ''Kerosene'') THEN ''Aviation & Kerosene''\n    WHEN standard_name = ''Naphtha'' THEN ''Naphtha''\n    WHEN standard_name = ''Lubricants'' THEN ''Lubricants''\n    ELSE ''Other Petroleum Products''\n  END as product_category,\n  CURRENT_TIMESTAMP as created_at\nFROM unique_products;\n\n-- Show the final clean standardized products\nSELECT * FROM petroverse.products_standardized ORDER BY product_name;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Step 1: Drop foreign key constraints temporarily\nALTER TABLE petroverse.performance_metrics DROP CONSTRAINT IF EXISTS performance_metrics_product_id_fkey;\n\n-- Step 2: Create mapping table for product ID updates\nCREATE TEMPORARY TABLE product_mapping AS\nWITH old_to_new AS (\n  SELECT \n    p_old.product_id as old_product_id,\n    p_old.product_name as old_product_name,\n    CASE \n      WHEN UPPER(p_old.product_name) IN (''GASOLINE'', ''GASOLINE (PREMIUM)'', ''PREMIUM GASOLINE'', ''REGULAR GASOLINE'') \n        THEN ''Gasoline''\n      WHEN UPPER(p_old.product_name) IN (''AUTOMOTIVE GAS OIL (DIESEL)'', ''GAS OIL (DIESEL)'', ''GASOIL'', ''GASOIL-CELL-SITE'', \n                                         ''GASOIL-MINES'', ''GASOIL-POWER-PLANT'', ''GASOIL-RIG'', ''MARINE GAS OIL'', \n                                         ''MARINE-GASOIL-FOREIGN'', ''MARINE-GASOIL-LOCAL'') \n        THEN ''Gasoil''\n      WHEN UPPER(p_old.product_name) IN (''LIQUEFIED PETROLEUM GAS (LPG)'', ''LPG'', ''LPG-BUTANE'', ''LPG-CRM'') \n        THEN ''LPG''\n      WHEN UPPER(p_old.product_name) IN (''HFO'', ''HFO-POWER'', ''RFO'', ''RFO-INDUSTRIAL'', ''FUEL OIL'') \n        THEN ''Heavy Fuel Oil''\n      WHEN UPPER(p_old.product_name) IN (''NAPHTHA'', ''NAPHTHA (UNIFIED)'') \n        THEN ''Naphtha''\n      WHEN UPPER(p_old.product_name) = ''ATK'' THEN ''Aviation Turbine Kerosene''\n      WHEN UPPER(p_old.product_name) = ''KEROSENE'' THEN ''Kerosene''\n      WHEN UPPER(p_old.product_name) = ''LUBRICANTS'' THEN ''Lubricants''\n      WHEN UPPER(p_old.product_name) = ''PREMIX'' THEN ''Premix''\n      ELSE p_old.product_name\n    END as standard_product_name,\n    p_new.product_id as new_product_id\n  FROM petroverse.products p_old\n  JOIN petroverse.products_standardized p_new ON (\n    p_new.product_name = CASE \n      WHEN UPPER(p_old.product_name) IN (''GASOLINE'', ''GASOLINE (PREMIUM)'', ''PREMIUM GASOLINE'', ''REGULAR GASOLINE'') \n        THEN ''Gasoline''\n      WHEN UPPER(p_old.product_name) IN (''AUTOMOTIVE GAS OIL (DIESEL)'', ''GAS OIL (DIESEL)'', ''GASOIL'', ''GASOIL-CELL-SITE'', \n                                         ''GASOIL-MINES'', ''GASOIL-POWER-PLANT'', ''GASOIL-RIG'', ''MARINE GAS OIL'', \n                                         ''MARINE-GASOIL-FOREIGN'', ''MARINE-GASOIL-LOCAL'') \n        THEN ''Gasoil''\n      WHEN UPPER(p_old.product_name) IN (''LIQUEFIED PETROLEUM GAS (LPG)'', ''LPG'', ''LPG-BUTANE'', ''LPG-CRM'') \n        THEN ''LPG''\n      WHEN UPPER(p_old.product_name) IN (''HFO'', ''HFO-POWER'', ''RFO'', ''RFO-INDUSTRIAL'', ''FUEL OIL'') \n        THEN ''Heavy Fuel Oil''\n      WHEN UPPER(p_old.product_name) IN (''NAPHTHA'', ''NAPHTHA (UNIFIED)'') \n        THEN ''Naphtha''\n      WHEN UPPER(p_old.product_name) = ''ATK'' THEN ''Aviation Turbine Kerosene''\n      WHEN UPPER(p_old.product_name) = ''KEROSENE'' THEN ''Kerosene''\n      WHEN UPPER(p_old.product_name) = ''LUBRICANTS'' THEN ''Lubricants''\n      WHEN UPPER(p_old.product_name) = ''PREMIX'' THEN ''Premix''\n      ELSE p_old.product_name\n    END\n  )\n)\nSELECT * FROM old_to_new;\n\n-- Show the mapping\nSELECT old_product_name, standard_product_name, old_product_id, new_product_id \nFROM product_mapping \nORDER BY standard_product_name, old_product_name;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Update BDC fact table with standardized product IDs\nUPDATE petroverse.fact_bdc_transactions \nSET product_id = pm.new_product_id\nFROM product_mapping pm\nWHERE fact_bdc_transactions.product_id = pm.old_product_id;\n\n-- Update OMC fact table with standardized product IDs\nUPDATE petroverse.fact_omc_transactions \nSET product_id = pm.new_product_id\nFROM product_mapping pm\nWHERE fact_omc_transactions.product_id = pm.old_product_id;\n\n-- Update performance_metrics if any data exists\nUPDATE petroverse.performance_metrics \nSET product_id = pm.new_product_id\nFROM product_mapping pm\nWHERE performance_metrics.product_id = pm.old_product_id;\n\n-- Now replace the products table\nDROP TABLE petroverse.products CASCADE;\nALTER TABLE petroverse.products_standardized RENAME TO products;\n\n-- Add primary key constraint\nALTER TABLE petroverse.products ADD CONSTRAINT pk_products PRIMARY KEY (product_id);\n\nSELECT ''BDC transactions updated: '' || COUNT(*) FROM petroverse.fact_bdc_transactions;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Recreate the mapping and update in one go\nWITH product_mapping AS (\n  SELECT \n    p_old.product_id as old_product_id,\n    p_new.product_id as new_product_id\n  FROM petroverse.products p_old\n  JOIN petroverse.products_standardized p_new ON (\n    p_new.product_name = CASE \n      WHEN UPPER(p_old.product_name) IN (''GASOLINE'', ''GASOLINE (PREMIUM)'', ''PREMIUM GASOLINE'', ''REGULAR GASOLINE'') \n        THEN ''Gasoline''\n      WHEN UPPER(p_old.product_name) IN (''AUTOMOTIVE GAS OIL (DIESEL)'', ''GAS OIL (DIESEL)'', ''GASOIL'', ''GASOIL-CELL-SITE'', \n                                         ''GASOIL-MINES'', ''GASOIL-POWER-PLANT'', ''GASOIL-RIG'', ''MARINE GAS OIL'', \n                                         ''MARINE-GASOIL-FOREIGN'', ''MARINE-GASOIL-LOCAL'') \n        THEN ''Gasoil''\n      WHEN UPPER(p_old.product_name) IN (''LIQUEFIED PETROLEUM GAS (LPG)'', ''LPG'', ''LPG-BUTANE'', ''LPG-CRM'') \n        THEN ''LPG''\n      WHEN UPPER(p_old.product_name) IN (''HFO'', ''HFO-POWER'', ''RFO'', ''RFO-INDUSTRIAL'', ''FUEL OIL'') \n        THEN ''Heavy Fuel Oil''\n      WHEN UPPER(p_old.product_name) IN (''NAPHTHA'', ''NAPHTHA (UNIFIED)'') \n        THEN ''Naphtha''\n      WHEN UPPER(p_old.product_name) = ''ATK'' THEN ''Aviation Turbine Kerosene''\n      WHEN UPPER(p_old.product_name) = ''KEROSENE'' THEN ''Kerosene''\n      WHEN UPPER(p_old.product_name) = ''LUBRICANTS'' THEN ''Lubricants''\n      WHEN UPPER(p_old.product_name) = ''PREMIX'' THEN ''Premix''\n      ELSE p_old.product_name\n    END\n  )\n)\nUPDATE petroverse.fact_bdc_transactions \nSET product_id = pm.new_product_id\nFROM product_mapping pm\nWHERE fact_bdc_transactions.product_id = pm.old_product_id;\n\n-- Check how many BDC records were updated\nSELECT COUNT(*) as bdc_updated FROM petroverse.fact_bdc_transactions WHERE product_id IN (1,2,3,4,5,6,7,8,9);\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Update OMC fact table\nWITH product_mapping AS (\n  SELECT \n    p_old.product_id as old_product_id,\n    p_new.product_id as new_product_id\n  FROM petroverse.products p_old\n  JOIN petroverse.products_standardized p_new ON (\n    p_new.product_name = CASE \n      WHEN UPPER(p_old.product_name) IN (''GASOLINE'', ''GASOLINE (PREMIUM)'', ''PREMIUM GASOLINE'', ''REGULAR GASOLINE'') \n        THEN ''Gasoline''\n      WHEN UPPER(p_old.product_name) IN (''AUTOMOTIVE GAS OIL (DIESEL)'', ''GAS OIL (DIESEL)'', ''GASOIL'', ''GASOIL-CELL-SITE'', \n                                         ''GASOIL-MINES'', ''GASOIL-POWER-PLANT'', ''GASOIL-RIG'', ''MARINE GAS OIL'', \n                                         ''MARINE-GASOIL-FOREIGN'', ''MARINE-GASOIL-LOCAL'') \n        THEN ''Gasoil''\n      WHEN UPPER(p_old.product_name) IN (''LIQUEFIED PETROLEUM GAS (LPG)'', ''LPG'', ''LPG-BUTANE'', ''LPG-CRM'') \n        THEN ''LPG''\n      WHEN UPPER(p_old.product_name) IN (''HFO'', ''HFO-POWER'', ''RFO'', ''RFO-INDUSTRIAL'', ''FUEL OIL'') \n        THEN ''Heavy Fuel Oil''\n      WHEN UPPER(p_old.product_name) IN (''NAPHTHA'', ''NAPHTHA (UNIFIED)'') \n        THEN ''Naphtha''\n      WHEN UPPER(p_old.product_name) = ''ATK'' THEN ''Aviation Turbine Kerosene''\n      WHEN UPPER(p_old.product_name) = ''KEROSENE'' THEN ''Kerosene''\n      WHEN UPPER(p_old.product_name) = ''LUBRICANTS'' THEN ''Lubricants''\n      WHEN UPPER(p_old.product_name) = ''PREMIX'' THEN ''Premix''\n      ELSE p_old.product_name\n    END\n  )\n)\nUPDATE petroverse.fact_omc_transactions \nSET product_id = pm.new_product_id\nFROM product_mapping pm\nWHERE fact_omc_transactions.product_id = pm.old_product_id;\n\n-- Now replace the products table\nDROP TABLE petroverse.products CASCADE;\nALTER TABLE petroverse.products_standardized RENAME TO products;\n\n-- Add constraints\nALTER TABLE petroverse.products ADD CONSTRAINT pk_products PRIMARY KEY (product_id);\n\n-- Check results\nSELECT COUNT(*) as omc_updated FROM petroverse.fact_omc_transactions WHERE product_id IN (1,2,3,4,5,6,7,8,9);\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Final verification of data integrity\nSELECT \n  ''Products'' as entity,\n  COUNT(*) as count,\n  ''Standardized from 29 to 9 unique products'' as note\nFROM petroverse.products\nUNION ALL\nSELECT \n  ''BDC Fact Records'', \n  COUNT(*),\n  ''All records have valid standardized product_id (1-9)''\nFROM petroverse.fact_bdc_transactions\nWHERE product_id BETWEEN 1 AND 9\nUNION ALL\nSELECT \n  ''OMC Fact Records'',\n  COUNT(*),\n  ''All records have valid standardized product_id (1-9)''\nFROM petroverse.fact_omc_transactions\nWHERE product_id BETWEEN 1 AND 9\nUNION ALL\nSELECT \n  ''Product Distribution'',\n  COUNT(DISTINCT product_id),\n  ''Unique product IDs used across all transactions''\nFROM (\n  SELECT product_id FROM petroverse.fact_bdc_transactions\n  UNION\n  SELECT product_id FROM petroverse.fact_omc_transactions\n) combined;\n\n-- Show product usage across datasets\nSELECT \n  p.product_name,\n  p.product_category,\n  COALESCE(bdc_count, 0) as bdc_transactions,\n  COALESCE(omc_count, 0) as omc_transactions,\n  COALESCE(bdc_count, 0) + COALESCE(omc_count, 0) as total_transactions\nFROM petroverse.products p\nLEFT JOIN (\n  SELECT product_id, COUNT(*) as bdc_count \n  FROM petroverse.fact_bdc_transactions \n  GROUP BY product_id\n) bdc ON p.product_id = bdc.product_id\nLEFT JOIN (\n  SELECT product_id, COUNT(*) as omc_count \n  FROM petroverse.fact_omc_transactions \n  GROUP BY product_id\n) omc ON p.product_id = omc.product_id\nORDER BY total_transactions DESC;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Step 1: Create BDC companies standardized table\nCREATE TABLE petroverse.companies_bdc_standardized AS\nWITH bdc_standardization AS (\n  SELECT \n    company_name as original_name,\n    company_type,\n    CASE \n      -- BLUE OCEAN GROUP variations\n      WHEN UPPER(company_name) IN (''BLUE OCEAN INVESTMENTS LTD'', ''BLUE OCEAN ENERGY LTD'', ''BLUE OCEAN BOTTLING PLANT'') \n        THEN ''BLUE OCEAN GROUP''\n      \n      -- CHASE PETROLEUM GHANA variations\n      WHEN UPPER(company_name) IN (''CHASE PETROLEUM GHANA LTD'', ''CHASE PET. GHANA LTD'') \n        THEN ''CHASE PETROLEUM GHANA''\n      \n      -- PETROLEUM WAREHOUSING & SUPPLY variations\n      WHEN UPPER(company_name) IN (''PETROLEUM WAREHOUSING & SUPPLY LTD'', ''PET. WAREHSN & SUPPLY'', ''PETROLEUM WARE HOUSE AND SUPPLIES LTD'') \n        THEN ''PETROLEUM WAREHOUSING & SUPPLY''\n      \n      -- RESTON ENERGY TRADING variations\n      WHEN UPPER(company_name) IN (''RESTON ENERGY TRADING LTD'', ''RESTON ENERGY TRADING LTD CO'') \n        THEN ''RESTON ENERGY TRADING''\n      \n      -- AKWAABA LINK GROUP variations (excluding the refinery)\n      WHEN UPPER(company_name) IN (''AKWABA LINK'', ''AKWAABA LINK INVESTMENTS LTD'') \n        THEN ''AKWAABA LINK GROUP''\n      \n      -- PLATON GROUP variations\n      WHEN UPPER(company_name) IN (''PLATON GAS OIL LTD'', ''PLATON OIL AND GAS'') \n        THEN ''PLATON GROUP''\n      \n      -- Keep AKWAABA OIL REFINERY separate as requested\n      WHEN UPPER(company_name) = ''AKWAABA OIL REFINERY LTD'' \n        THEN ''AKWAABA OIL REFINERY LTD''\n      \n      -- Keep all others as is\n      ELSE company_name\n    END as standardized_name,\n    COUNT(*) as transaction_count\n  FROM petroverse.bdc_data \n  WHERE company_name IS NOT NULL\n  GROUP BY company_name, company_type\n)\nSELECT DISTINCT\n  ROW_NUMBER() OVER (ORDER BY standardized_name) as company_id,\n  standardized_name as company_name,\n  ''BDC'' as company_type,\n  CURRENT_TIMESTAMP as created_at,\n  SUM(transaction_count) as total_transactions\nFROM bdc_standardization\nGROUP BY standardized_name;\n\n-- Show the standardized BDC companies\nSELECT \n  company_name, \n  total_transactions,\n  CASE WHEN total_transactions > 200 THEN ''MAJOR'' \n       WHEN total_transactions > 100 THEN ''MEDIUM''\n       ELSE ''SMALL'' END as size_category\nFROM petroverse.companies_bdc_standardized \nORDER BY total_transactions DESC;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Step 2: Update BDC fact table with standardized company IDs\nUPDATE petroverse.fact_bdc_transactions \nSET company_id = cs.company_id\nFROM petroverse.companies_bdc_standardized cs,\n     petroverse.bdc_data bd\nWHERE fact_bdc_transactions.transaction_id = bd.id\n  AND cs.company_name = CASE \n    -- BLUE OCEAN GROUP variations\n    WHEN UPPER(bd.company_name) IN (''BLUE OCEAN INVESTMENTS LTD'', ''BLUE OCEAN ENERGY LTD'', ''BLUE OCEAN BOTTLING PLANT'') \n      THEN ''BLUE OCEAN GROUP''\n    \n    -- CHASE PETROLEUM GHANA variations\n    WHEN UPPER(bd.company_name) IN (''CHASE PETROLEUM GHANA LTD'', ''CHASE PET. GHANA LTD'') \n      THEN ''CHASE PETROLEUM GHANA''\n    \n    -- PETROLEUM WAREHOUSING & SUPPLY variations\n    WHEN UPPER(bd.company_name) IN (''PETROLEUM WAREHOUSING & SUPPLY LTD'', ''PET. WAREHSN & SUPPLY'', ''PETROLEUM WARE HOUSE AND SUPPLIES LTD'') \n      THEN ''PETROLEUM WAREHOUSING & SUPPLY''\n    \n    -- RESTON ENERGY TRADING variations\n    WHEN UPPER(bd.company_name) IN (''RESTON ENERGY TRADING LTD'', ''RESTON ENERGY TRADING LTD CO'') \n      THEN ''RESTON ENERGY TRADING''\n    \n    -- AKWAABA LINK GROUP variations (excluding the refinery)\n    WHEN UPPER(bd.company_name) IN (''AKWABA LINK'', ''AKWAABA LINK INVESTMENTS LTD'') \n      THEN ''AKWAABA LINK GROUP''\n    \n    -- PLATON GROUP variations\n    WHEN UPPER(bd.company_name) IN (''PLATON GAS OIL LTD'', ''PLATON OIL AND GAS'') \n      THEN ''PLATON GROUP''\n    \n    -- Keep AKWAABA OIL REFINERY separate\n    WHEN UPPER(bd.company_name) = ''AKWAABA OIL REFINERY LTD'' \n      THEN ''AKWAABA OIL REFINERY LTD''\n    \n    -- Keep all others as is\n    ELSE bd.company_name\n  END;\n\n-- Check how many BDC records were updated\nSELECT \n  ''BDC Transactions Updated'' as status,\n  COUNT(*) as records_updated\nFROM petroverse.fact_bdc_transactions \nWHERE company_id IS NOT NULL;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Step 3: Update the companies table to include standardized BDC companies\n-- First backup the original companies table\nCREATE TABLE petroverse.companies_backup AS SELECT * FROM petroverse.companies;\n\n-- Clear and repopulate companies table with standardized BDC companies\nDELETE FROM petroverse.companies WHERE company_type = ''BDC'';\n\n-- Insert standardized BDC companies\nINSERT INTO petroverse.companies (company_id, company_name, company_type, created_at)\nSELECT company_id, company_name, company_type, created_at \nFROM petroverse.companies_bdc_standardized;\n\n-- Verify the companies table\nSELECT \n  ''Total Companies'' as metric,\n  COUNT(*) as count\nFROM petroverse.companies\nUNION ALL\nSELECT \n  ''BDC Companies'',\n  COUNT(*)\nFROM petroverse.companies \nWHERE company_type = ''BDC''\nUNION ALL\nSELECT \n  ''OMC Companies'',\n  COUNT(*)\nFROM petroverse.companies \nWHERE company_type = ''OMC'';\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Get the maximum company_id from existing companies\nSELECT MAX(company_id) as max_existing_id FROM petroverse.companies;\n\n-- Update BDC standardized company IDs to avoid conflicts\nUPDATE petroverse.companies_bdc_standardized \nSET company_id = company_id + 1000;\n\n-- Insert standardized BDC companies with offset IDs\nINSERT INTO petroverse.companies (company_id, company_name, company_type, created_at)\nSELECT company_id, company_name, company_type, created_at \nFROM petroverse.companies_bdc_standardized;\n\n-- Update the BDC fact table to use the new company IDs\nUPDATE petroverse.fact_bdc_transactions \nSET company_id = company_id + 1000\nWHERE company_id BETWEEN 1 AND 53;\n\n-- Verify the update\nSELECT COUNT(*) as bdc_transactions_with_new_ids \nFROM petroverse.fact_bdc_transactions \nWHERE company_id BETWEEN 1001 AND 1053;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Check what constraints exist on companies table\nSELECT \n  conname as constraint_name,\n  contype as constraint_type\nFROM pg_constraint \nWHERE conrelid = ''petroverse.companies''::regclass;\n\n-- Check if there are existing BDC companies that might conflict\nSELECT company_name, company_type, COUNT(*) \nFROM petroverse.companies \nWHERE company_type = ''BDC''\nGROUP BY company_name, company_type\nHAVING COUNT(*) > 1;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Check existing companies that might conflict with our standardized BDC names\nSELECT \n  c.company_name,\n  c.company_type,\n  cs.company_name as standardized_name\nFROM petroverse.companies c\nINNER JOIN petroverse.companies_bdc_standardized cs \n  ON c.company_name = cs.company_name\nORDER BY c.company_name;\n\n-- Also check how many existing companies are BDC vs OMC\nSELECT company_type, COUNT(*) as count\nFROM petroverse.companies\nGROUP BY company_type;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Create a mapping from old company IDs to new standardized company IDs\nWITH company_mapping AS (\n  SELECT \n    c_old.company_id as old_company_id,\n    c_old.company_name as old_company_name,\n    CASE \n      -- BLUE OCEAN GROUP variations\n      WHEN UPPER(c_old.company_name) IN (''BLUE OCEAN INVESTMENTS LTD'', ''BLUE OCEAN ENERGY LTD'', ''BLUE OCEAN BOTTLING PLANT'') \n        THEN ''BLUE OCEAN GROUP''\n      \n      -- CHASE PETROLEUM GHANA variations  \n      WHEN UPPER(c_old.company_name) IN (''CHASE PETROLEUM GHANA LTD'', ''CHASE PET. GHANA LTD'') \n        THEN ''CHASE PETROLEUM GHANA''\n      \n      -- PETROLEUM WAREHOUSING & SUPPLY variations\n      WHEN UPPER(c_old.company_name) IN (''PETROLEUM WAREHOUSING & SUPPLY LTD'', ''PET. WAREHSN & SUPPLY'', ''PETROLEUM WARE HOUSE AND SUPPLIES LTD'') \n        THEN ''PETROLEUM WAREHOUSING & SUPPLY''\n      \n      -- RESTON ENERGY TRADING variations\n      WHEN UPPER(c_old.company_name) IN (''RESTON ENERGY TRADING LTD'', ''RESTON ENERGY TRADING LTD CO'') \n        THEN ''RESTON ENERGY TRADING''\n      \n      -- AKWAABA LINK GROUP variations\n      WHEN UPPER(c_old.company_name) IN (''AKWABA LINK'', ''AKWAABA LINK INVESTMENTS LTD'') \n        THEN ''AKWAABA LINK GROUP''\n      \n      -- PLATON GROUP variations\n      WHEN UPPER(c_old.company_name) IN (''PLATON GAS OIL LTD'', ''PLATON OIL AND GAS'') \n        THEN ''PLATON GROUP''\n      \n      -- Keep AKWAABA OIL REFINERY separate\n      WHEN UPPER(c_old.company_name) = ''AKWAABA OIL REFINERY LTD'' \n        THEN ''AKWAABA OIL REFINERY LTD''\n      \n      -- Keep all others as is\n      ELSE c_old.company_name\n    END as standard_company_name,\n    cs.company_id + 1000 as new_company_id\n  FROM petroverse.companies c_old\n  JOIN petroverse.companies_bdc_standardized cs ON (\n    cs.company_name = CASE \n      WHEN UPPER(c_old.company_name) IN (''BLUE OCEAN INVESTMENTS LTD'', ''BLUE OCEAN ENERGY LTD'', ''BLUE OCEAN BOTTLING PLANT'') \n        THEN ''BLUE OCEAN GROUP''\n      WHEN UPPER(c_old.company_name) IN (''CHASE PETROLEUM GHANA LTD'', ''CHASE PET. GHANA LTD'') \n        THEN ''CHASE PETROLEUM GHANA''\n      WHEN UPPER(c_old.company_name) IN (''PETROLEUM WAREHOUSING & SUPPLY LTD'', ''PET. WAREHSN & SUPPLY'', ''PETROLEUM WARE HOUSE AND SUPPLIES LTD'') \n        THEN ''PETROLEUM WAREHOUSING & SUPPLY''\n      WHEN UPPER(c_old.company_name) IN (''RESTON ENERGY TRADING LTD'', ''RESTON ENERGY TRADING LTD CO'') \n        THEN ''RESTON ENERGY TRADING''\n      WHEN UPPER(c_old.company_name) IN (''AKWABA LINK'', ''AKWAABA LINK INVESTMENTS LTD'') \n        THEN ''AKWAABA LINK GROUP''\n      WHEN UPPER(c_old.company_name) IN (''PLATON GAS OIL LTD'', ''PLATON OIL AND GAS'') \n        THEN ''PLATON GROUP''\n      WHEN UPPER(c_old.company_name) = ''AKWAABA OIL REFINERY LTD'' \n        THEN ''AKWAABA OIL REFINERY LTD''\n      ELSE c_old.company_name\n    END\n  )\n  WHERE c_old.company_type = ''BDC''\n)\nSELECT \n  old_company_name,\n  standard_company_name,\n  old_company_id,\n  new_company_id,\n  CASE WHEN old_company_name = standard_company_name THEN ''NO_CHANGE'' ELSE ''STANDARDIZED'' END as change_type\nFROM company_mapping \nORDER BY change_type DESC, old_company_name;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Analyze OMC company names for potential duplications\nSELECT \n    company_name,\n    company_type,\n    COUNT(*) as transaction_count\nFROM petroverse.omc_data \nWHERE company_name IS NOT NULL\nGROUP BY company_name, company_type\nORDER BY company_name;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Manual identification of clear OMC duplications\nWITH omc_duplicates AS (\n  SELECT \n    company_name,\n    COUNT(*) as transaction_count,\n    CASE \n      -- GLORY OIL variations\n      WHEN UPPER(company_name) LIKE ''%GLORY OIL%'' THEN ''GLORY OIL''\n      \n      -- GOIL variations  \n      WHEN UPPER(company_name) LIKE ''%GOIL%'' THEN ''GOIL''\n      \n      -- JO & JU variations\n      WHEN UPPER(company_name) LIKE ''%JO & JU%'' THEN ''JO & JU ENERGY''\n      \n      -- MAXX variations\n      WHEN UPPER(company_name) LIKE ''%MAXX%'' THEN ''MAXX ENERGY GROUP''\n      \n      -- PETROSOL variations\n      WHEN UPPER(company_name) LIKE ''%PETROSOL%'' THEN ''PETROSOL GROUP''\n      \n      -- RUNEL variations\n      WHEN UPPER(company_name) LIKE ''%RUNEL%'' THEN ''RUNEL ENERGY''\n      \n      -- AI ENERGY variations\n      WHEN UPPER(company_name) LIKE ''%AI ENERGY%'' THEN ''AI ENERGY GROUP''\n      \n      -- GAMMA variations\n      WHEN UPPER(company_name) LIKE ''%GAMMA Petroleum%'' THEN ''GAMMA PETROLEUM & ENERGY SERVICES''\n      \n      ELSE company_name\n    END as standardized_name\n  FROM petroverse.omc_data \n  WHERE company_name IS NOT NULL\n  GROUP BY company_name\n)\nSELECT \n  standardized_name,\n  STRING_AGG(company_name, '' | '' ORDER BY transaction_count DESC) as original_variations,\n  STRING_AGG(transaction_count::text, '' | '' ORDER BY transaction_count DESC) as counts,\n  SUM(transaction_count) as total_transactions,\n  COUNT(*) as variation_count\nFROM omc_duplicates\nGROUP BY standardized_name\nHAVING COUNT(*) > 1 OR SUM(transaction_count) > 250\nORDER BY SUM(transaction_count) DESC;\")",
      "Bash(mkdir:*)",
      "Bash(start http://localhost:3001/dashboard/executive)",
      "Bash(start http://localhost:3001/dashboard/bdc/comprehensive)",
      "Bash(grep:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\nSELECT \n    MIN(year) as min_year,\n    MAX(year) as max_year,\n    MIN(DATE(CONCAT(year, ''-'', LPAD(month::text, 2, ''0''), ''-01''))) as min_date,\n    MAX(DATE(CONCAT(year, ''-'', LPAD(month::text, 2, ''0''), ''-01''))) as max_date,\n    COUNT(*) as total_records\nFROM petroverse.bdc_data;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\nSELECT \n    year,\n    COUNT(DISTINCT month) as months,\n    MIN(month) as min_month,\n    MAX(month) as max_month,\n    COUNT(*) as records\nFROM petroverse.fact_bdc_transactions f\nJOIN petroverse.time_dimension t ON f.date_id = t.date_id\nGROUP BY year\nORDER BY year;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\nSELECT \n    t.year,\n    t.month,\n    COUNT(*) as records,\n    SUM(f.volume_liters) as total_volume_liters,\n    SUM(f.volume_mt) as total_volume_mt\nFROM petroverse.fact_bdc_transactions f\nJOIN petroverse.time_dimension t ON f.date_id = t.date_id\nWHERE t.year = 2024 AND t.month IN (7, 8)\nGROUP BY t.year, t.month\nORDER BY t.year, t.month;\")",
      "Bash(node:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\nSELECT \n    year,\n    month,\n    COUNT(*) as records,\n    SUM(volume_liters) as total_volume_liters,\n    SUM(volume_mt) as total_volume_mt\nFROM petroverse.fact_bdc_transactions f\nJOIN petroverse.time_dimension t ON f.date_id = t.date_id\nWHERE year = 2024 AND month IN (7, 8)\nGROUP BY year, month\nORDER BY year, month;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\nWITH monthly_aggregates AS (\n    SELECT \n        t.month,\n        AVG(f.volume_liters) as avg_monthly_volume,\n        STDDEV(f.volume_liters) as volume_std,\n        COUNT(DISTINCT t.year) as years_observed\n    FROM petroverse.fact_bdc_transactions f\n    JOIN petroverse.time_dimension t ON f.date_id = t.date_id\n    WHERE t.full_date >= ''2024-01-01'' AND t.full_date <= ''2024-12-31''\n    GROUP BY t.month\n),\nseasonal_index AS (\n    SELECT \n        month,\n        avg_monthly_volume,\n        avg_monthly_volume / AVG(avg_monthly_volume) OVER() * 100 as seasonal_index,\n        volume_std / NULLIF(avg_monthly_volume, 0) * 100 as monthly_cv\n    FROM monthly_aggregates\n),\npeak_trough AS (\n    SELECT \n        MAX(seasonal_index) as max_index,\n        MIN(seasonal_index) as min_index\n    FROM seasonal_index\n)\nSELECT \n    si1.month as peak_month,\n    si2.month as trough_month,\n    pt.max_index - pt.min_index as seasonal_amplitude\nFROM peak_trough pt\nCROSS JOIN seasonal_index si1\nCROSS JOIN seasonal_index si2  \nWHERE si1.seasonal_index = pt.max_index\n  AND si2.seasonal_index = pt.min_index\nLIMIT 1;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\nWITH monthly_aggregates AS (\n    SELECT \n        t.month,\n        AVG(f.volume_liters) as avg_monthly_volume,\n        STDDEV(f.volume_liters) as volume_std,\n        COUNT(DISTINCT t.year) as years_observed\n    FROM petroverse.fact_bdc_transactions f\n    JOIN petroverse.time_dimension t ON f.date_id = t.date_id\n    WHERE t.full_date >= ''2024-01-01'' AND t.full_date <= ''2024-12-31''\n    GROUP BY t.month\n),\nseasonal_index AS (\n    SELECT \n        month,\n        avg_monthly_volume,\n        avg_monthly_volume / AVG(avg_monthly_volume) OVER() * 100 as seasonal_index,\n        volume_std / NULLIF(avg_monthly_volume, 0) * 100 as monthly_cv\n    FROM monthly_aggregates\n),\npeak_trough AS (\n    SELECT \n        MAX(seasonal_index) as max_index,\n        MIN(seasonal_index) as min_index\n    FROM seasonal_index\n)\nSELECT \n    (SELECT si1.month FROM seasonal_index si1 CROSS JOIN peak_trough pt WHERE si1.seasonal_index = pt.max_index LIMIT 1) as peak_month,\n    (SELECT si2.month FROM seasonal_index si2 CROSS JOIN peak_trough pt WHERE si2.seasonal_index = pt.min_index LIMIT 1) as trough_month,\n    pt.max_index - pt.min_index as seasonal_amplitude,\n    (SELECT AVG(monthly_cv) FROM seasonal_index) as avg_monthly_volatility\nFROM peak_trough pt;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\nWITH monthly_aggregates AS (\n    SELECT \n        t.month,\n        AVG(f.volume_liters) as avg_monthly_volume,\n        STDDEV(f.volume_liters) as volume_std,\n        COUNT(DISTINCT t.year) as years_observed\n    FROM petroverse.fact_bdc_transactions f\n    JOIN petroverse.time_dimension t ON f.date_id = t.date_id\n    WHERE t.full_date >= ''2024-01-01'' AND t.full_date <= ''2024-12-31''\n    GROUP BY t.month\n),\nseasonal_index AS (\n    SELECT \n        month,\n        avg_monthly_volume,\n        avg_monthly_volume / AVG(avg_monthly_volume) OVER() * 100 as seasonal_index,\n        volume_std / NULLIF(avg_monthly_volume, 0) * 100 as monthly_cv\n    FROM monthly_aggregates\n)\nSELECT \n    (SELECT month FROM seasonal_index ORDER BY seasonal_index DESC LIMIT 1) as peak_month,\n    (SELECT month FROM seasonal_index ORDER BY seasonal_index ASC LIMIT 1) as trough_month,\n    MAX(seasonal_index) - MIN(seasonal_index) as seasonal_amplitude,\n    AVG(monthly_cv) as avg_monthly_volatility\nFROM seasonal_index;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"SELECT DISTINCT product_category, COUNT(*) as product_count FROM petroverse.products GROUP BY product_category ORDER BY product_category;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"SELECT product_name, product_category FROM petroverse.products ORDER BY product_category, product_name;\")",
      "Bash(copy \"C:\\Users\\victo\\Documents\\Data_Science_Projects\\petroverse_analytics\\apps\\web\\src\\app\\dashboard\\bdc\\comprehensive\\page.tsx\" \"C:\\Users\\victo\\Documents\\Data_Science_Projects\\petroverse_analytics\\apps\\web\\src\\app\\dashboard\\omc\\comprehensive\\page.tsx\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"SELECT COUNT(*) as omc_records FROM petroverse.fact_omc_transactions;\")",
      "Bash(start http://localhost:3001/dashboard/omc/comprehensive)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"SELECT COUNT(DISTINCT company_id) as unique_omc_companies FROM petroverse.fact_omc_transactions;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\nSELECT \n    ''Raw OMC Data'' as source,\n    COUNT(DISTINCT company_name) as unique_companies,\n    COUNT(*) as total_records\nFROM petroverse.omc_data\nUNION ALL\nSELECT \n    ''OMC Fact Table'' as source,\n    COUNT(DISTINCT company_id) as unique_companies,\n    COUNT(*) as total_records  \nFROM petroverse.fact_omc_transactions;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\nWITH company_volumes AS (\n    SELECT \n        c.company_id,\n        c.company_name,\n        SUM(f.volume_liters) as total_volume,\n        COUNT(f.transaction_id) as transactions,\n        COUNT(DISTINCT f.product_id) as product_count\n    FROM petroverse.fact_omc_transactions f\n    JOIN petroverse.companies c ON f.company_id = c.company_id\n    JOIN petroverse.time_dimension t ON f.date_id = t.date_id\n    WHERE 1=1\n    GROUP BY c.company_id, c.company_name\n)\nSELECT COUNT(*) as total_companies FROM company_volumes;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\nSELECT \n    ''OMC companies in fact table'' as description,\n    MIN(company_id) as min_id,\n    MAX(company_id) as max_id\nFROM petroverse.fact_omc_transactions\nUNION ALL\nSELECT \n    ''OMC companies in companies table'',\n    MIN(company_id),\n    MAX(company_id)\nFROM petroverse.companies\nWHERE company_type = ''OMC'';\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\nSELECT COUNT(*) as missing_companies\nFROM (\n    SELECT DISTINCT f.company_id\n    FROM petroverse.fact_omc_transactions f\n    LEFT JOIN petroverse.companies c ON f.company_id = c.company_id\n    WHERE c.company_id IS NULL\n) missing;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Find the missing company data from raw OMC data\nSELECT \n    f.company_id,\n    o.company_name,\n    o.company_type,\n    COUNT(*) as transactions\nFROM petroverse.fact_omc_transactions f\nLEFT JOIN petroverse.companies c ON f.company_id = c.company_id\nJOIN petroverse.omc_data o ON f.transaction_id = o.id\nWHERE c.company_id IS NULL\nGROUP BY f.company_id, o.company_name, o.company_type\nORDER BY f.company_id\nLIMIT 5;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Check if these company names already exist with different IDs\nSELECT \n    c.company_id as existing_id,\n    c.company_name,\n    c.company_type,\n    f.company_id as fact_table_id\nFROM petroverse.companies c\nJOIN (\n    SELECT DISTINCT f.company_id, o.company_name\n    FROM petroverse.fact_omc_transactions f\n    JOIN petroverse.omc_data o ON f.transaction_id = o.id\n    LIMIT 10\n) f ON c.company_name = f.company_name\nWHERE c.company_id != f.company_id\nLIMIT 5;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Update the OMC fact table to use correct company IDs from companies table\nUPDATE petroverse.fact_omc_transactions \nSET company_id = c.company_id\nFROM petroverse.companies c, petroverse.omc_data o\nWHERE fact_omc_transactions.transaction_id = o.id\n  AND c.company_name = o.company_name\n  AND c.company_type = ''OMC'';\n\nSELECT ''Updated OMC fact table company IDs'' as result;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\nSELECT \n    COUNT(DISTINCT f.company_id) as omc_companies_in_fact_table,\n    COUNT(DISTINCT c.company_id) as omc_companies_with_valid_links\nFROM petroverse.fact_omc_transactions f\nJOIN petroverse.companies c ON f.company_id = c.company_id\nWHERE c.company_type = ''OMC'';\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"SELECT * FROM petroverse.time_dimension LIMIT 5;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"SELECT COUNT(DISTINCT date_id) as unique_dates, COUNT(DISTINCT full_date) as unique_full_dates, COUNT(DISTINCT CONCAT(year, ''-'', month)) as unique_months FROM petroverse.time_dimension;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"SELECT DISTINCT DATE_PART(''day'', full_date) as day_of_month FROM petroverse.time_dimension LIMIT 10;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"SELECT * FROM petroverse.fact_bdc_transactions LIMIT 5;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"SELECT company_id, product_id, date_id, COUNT(*) as duplicate_count FROM petroverse.fact_bdc_transactions GROUP BY company_id, product_id, date_id HAVING COUNT(*) > 1 LIMIT 5;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"SELECT c.company_name, p.product_name, t.year, t.month, COUNT(*) as record_count, SUM(f.volume_liters) as total_volume FROM petroverse.fact_bdc_transactions f JOIN petroverse.companies c ON f.company_id = c.company_id JOIN petroverse.products p ON f.product_id = p.product_id JOIN petroverse.time_dimension t ON f.date_id = t.date_id WHERE c.company_id = 1002 AND t.year = 2022 GROUP BY c.company_name, p.product_name, t.year, t.month ORDER BY t.month LIMIT 10;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"SELECT ''Total fact records'' as metric, COUNT(*) as count FROM petroverse.fact_bdc_transactions UNION ALL SELECT ''Unique company-product-month combinations'', COUNT(DISTINCT CONCAT(company_id, ''-'', product_id, ''-'', date_id)) FROM petroverse.fact_bdc_transactions;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"WITH test AS (SELECT c.company_name, SUM(f.volume_liters) as vol, SUM(f.volume_liters) * 100.0 / SUM(SUM(f.volume_liters)) OVER() as market_share FROM petroverse.fact_bdc_transactions f JOIN petroverse.companies c ON f.company_id = c.company_id GROUP BY c.company_name ORDER BY vol DESC LIMIT 5) SELECT company_name, market_share, POWER(market_share, 2) as share_squared FROM test;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -f \"C:\\Users\\victo\\Documents\\Data_Science_Projects\\petroverse_analytics\\standardize_omc_additional.sql\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -f \"C:\\Users\\victo\\Documents\\Data_Science_Projects\\petroverse_analytics\\standardize_bdc_med.sql\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Check OMC monthly volumes for 2019-2021 to see the spike\nSELECT \n    year,\n    month,\n    COUNT(*) as record_count,\n    COUNT(DISTINCT company_name) as companies,\n    SUM(volume_liters) as total_liters,\n    SUM(volume_mt) as total_mt,\n    AVG(volume_liters) as avg_liters,\n    MAX(volume_liters) as max_liters\nFROM petroverse.omc_data\nWHERE year BETWEEN 2019 AND 2021\nGROUP BY year, month\nORDER BY year, month;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\nSELECT \n    year,\n    month,\n    COUNT(DISTINCT company_name) as unique_companies,\n    COUNT(*) as total_records,\n    SUM(volume_liters) as total_volume_liters,\n    SUM(volume_mt) as total_volume_mt\nFROM petroverse.omc_data\nWHERE year = 2019 AND month = 1\nGROUP BY year, month;\n\")",
      "Bash(find:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\pg_dump\" -U postgres -p 5432 -d petroverse_analytics -f \"C:\\Users\\victo\\Documents\\Data_Science_Projects\\petroverse_analytics\\database_backup_before_data_correction.sql\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"SELECT column_name FROM information_schema.columns WHERE table_name = ''bdc_data'' AND table_schema = ''petroverse'' ORDER BY ordinal_position;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"SELECT column_name FROM information_schema.columns WHERE table_name = ''omc_data'' AND table_schema = ''petroverse'' ORDER BY ordinal_position;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"SELECT year, month, company_name, product, volume_liters FROM petroverse.omc_data LIMIT 5;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Verify standardized companies are being used\nSELECT ''Companies in OMC Data'' as category, company_name, COUNT(*) as records\nFROM petroverse.omc_data \nGROUP BY company_name \nORDER BY records DESC \nLIMIT 10;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Check OMC companies\nSELECT ''OMC Companies'' as category, COUNT(DISTINCT company_name) as count\nFROM petroverse.omc_data\n\nUNION ALL\n\n-- Check BDC companies  \nSELECT ''BDC Companies'', COUNT(DISTINCT company_name)\nFROM petroverse.bdc_data\n\nUNION ALL\n\n-- Check total unique companies across both\nSELECT ''Total Unique Companies'', COUNT(DISTINCT company_name)\nFROM (\n  SELECT company_name FROM petroverse.omc_data\n  UNION\n  SELECT company_name FROM petroverse.bdc_data\n) combined;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Show companies that appear in both datasets\nSELECT company_name\nFROM petroverse.omc_data\nWHERE company_name IN (SELECT DISTINCT company_name FROM petroverse.bdc_data)\nGROUP BY company_name\nORDER BY company_name;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Show OMC companies\nSELECT ''OMC COMPANIES'' as category, company_name, COUNT(*) as records\nFROM petroverse.omc_data\nGROUP BY company_name\nORDER BY records DESC;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Show BDC companies  \nSELECT ''BDC COMPANIES'' as category, company_name, COUNT(*) as records\nFROM petroverse.bdc_data\nGROUP BY company_name\nORDER BY records DESC;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Show current corrupted state in database\nSELECT ''CURRENT CORRUPTED DATABASE STATE'' as status;\n\nSELECT ''OMC Companies (corrupted)'' as category, company_name, COUNT(*) as records\nFROM petroverse.omc_data\nGROUP BY company_name\nORDER BY records DESC;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"SELECT ''OMC Data'' as table_name, COUNT(*) as records FROM petroverse.omc_data UNION ALL SELECT ''BDC Data'', COUNT(*) FROM petroverse.bdc_data UNION ALL SELECT ''Companies'', COUNT(*) FROM petroverse.companies UNION ALL SELECT ''Products'', COUNT(*) FROM petroverse.products;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Check current double-counting situation\nSELECT \n    ''EVERSTONE ENERGY'' as company,\n    ''OMC'' as dataset,\n    COUNT(*) as records,\n    SUM(volume_liters) as total_liters\nFROM petroverse.omc_data\nWHERE company_name = ''EVERSTONE ENERGY''\nUNION ALL\nSELECT \n    ''EVERSTONE ENERGY'',\n    ''BDC'',\n    COUNT(*),\n    SUM(volume_liters)\nFROM petroverse.bdc_data\nWHERE company_name = ''EVERSTONE ENERGY''\nUNION ALL\nSELECT \n    ''ADINKRA'',\n    ''OMC'',\n    COUNT(*),\n    SUM(volume_liters)\nFROM petroverse.omc_data\nWHERE company_name = ''ADINKRA''\nUNION ALL\nSELECT \n    ''ADINKRA'',\n    ''BDC'',\n    COUNT(*),\n    SUM(volume_liters)\nFROM petroverse.bdc_data\nWHERE company_name = ''ADINKRA''\nORDER BY company, dataset;\")",
      "Bash(dir \"C:\\Users\\victo\\Documents\\Data_Science_Projects\\petroverse_analytics\\data\\raw\\initial raw data from npa website\\bdc_bidec\\*2024*\")",
      "Bash(cmd /c dir:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Quick check of recent data that should appear in charts\nSELECT \n    ''Data Available for Charts'' as check_type,\n    dataset,\n    COUNT(DISTINCT company_name) as unique_companies,\n    MIN(year) || ''-'' || MAX(year) as year_range,\n    COUNT(*) as total_records\nFROM (\n    SELECT ''BDC'' as dataset, company_name, year FROM petroverse.bdc_data\n    UNION ALL\n    SELECT ''OMC'', company_name, year FROM petroverse.omc_data\n) combined\nGROUP BY dataset\nORDER BY dataset;\n\n-- Check 2024 data specifically (current year)\nSELECT \n    ''Current Year (2024) Data'' as check_type,\n    dataset,\n    COUNT(*) as records_2024,\n    COUNT(DISTINCT company_name) as companies_2024\nFROM (\n    SELECT ''BDC'' as dataset, company_name FROM petroverse.bdc_data WHERE year = 2024\n    UNION ALL\n    SELECT ''OMC'', company_name FROM petroverse.omc_data WHERE year = 2024\n) curr\nGROUP BY dataset;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Check if fact tables are populated\nSELECT \n    ''Fact Tables Status'' as table_type,\n    ''BDC Fact Table'' as table_name,\n    COUNT(*) as records,\n    COUNT(DISTINCT company_id) as companies,\n    COUNT(DISTINCT product_id) as products\nFROM petroverse.fact_bdc_transactions\nUNION ALL\nSELECT \n    ''Fact Tables Status'',\n    ''OMC Fact Table'',\n    COUNT(*),\n    COUNT(DISTINCT company_id),\n    COUNT(DISTINCT product_id)\nFROM petroverse.fact_omc_transactions;\n\n-- Check time dimension\nSELECT \n    ''Time Dimension'' as dimension,\n    COUNT(*) as total_periods,\n    MIN(year) || ''-'' || MAX(year) as year_range,\n    COUNT(DISTINCT year) as unique_years\nFROM petroverse.time_dimension;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Final verification for dashboards\nSELECT \n    ''Dashboard Data Ready'' as status,\n    dataset,\n    ''Companies: '' || companies || '', Records: '' || records as summary,\n    ''Years: '' || year_range as coverage\nFROM (\n    SELECT \n        ''BDC Dashboard'' as dataset,\n        COUNT(DISTINCT f.company_id) as companies,\n        COUNT(*) as records,\n        MIN(t.year) || ''-'' || MAX(t.year) as year_range\n    FROM petroverse.fact_bdc_transactions f\n    JOIN petroverse.time_dimension t ON f.date_id = t.date_id\n    UNION ALL\n    SELECT \n        ''OMC Dashboard'',\n        COUNT(DISTINCT f.company_id),\n        COUNT(*),\n        MIN(t.year) || ''-'' || MAX(t.year)\n    FROM petroverse.fact_omc_transactions f\n    JOIN petroverse.time_dimension t ON f.date_id = t.date_id\n) summary\nORDER BY dataset;\n\n-- Check EVERSTONE and ADINKRA specifically\nSELECT \n    ''Company Check'' as verification,\n    c.company_name,\n    c.company_type,\n    COUNT(CASE WHEN f.transaction_id IS NOT NULL THEN 1 END) as bdc_facts,\n    COUNT(CASE WHEN o.transaction_id IS NOT NULL THEN 1 END) as omc_facts\nFROM petroverse.companies c\nLEFT JOIN petroverse.fact_bdc_transactions f ON c.company_id = f.company_id\nLEFT JOIN petroverse.fact_omc_transactions o ON c.company_id = o.company_id\nWHERE c.company_name IN (''EVERSTONE ENERGY'', ''ADINKRA'')\nGROUP BY c.company_name, c.company_type;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Analyze January volumes across all years\nSELECT \n    ''BDC January Analysis'' as dataset,\n    t.year,\n    t.month,\n    COUNT(*) as records,\n    COUNT(DISTINCT f.company_id) as companies,\n    SUM(f.volume_liters)/1000000 as million_liters,\n    AVG(f.volume_liters) as avg_volume\nFROM petroverse.fact_bdc_transactions f\nJOIN petroverse.time_dimension t ON f.date_id = t.date_id\nWHERE t.month = 1\nGROUP BY t.year, t.month\nORDER BY t.year;\n\n-- Compare January vs other months average\nSELECT \n    ''BDC Monthly Comparison'' as analysis,\n    CASE WHEN t.month = 1 THEN ''January'' ELSE ''Other Months'' END as month_group,\n    COUNT(*) as total_records,\n    AVG(f.volume_liters) as avg_volume,\n    SUM(f.volume_liters)/1000000 as total_million_liters,\n    COUNT(DISTINCT t.year || ''-'' || t.month) as month_count\nFROM petroverse.fact_bdc_transactions f\nJOIN petroverse.time_dimension t ON f.date_id = t.date_id\nGROUP BY CASE WHEN t.month = 1 THEN ''January'' ELSE ''Other Months'' END;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Check sample January records to see what''s wrong\nSELECT \n    year,\n    month,\n    company_name,\n    product,\n    volume,\n    unit_type,\n    volume_liters,\n    volume_kg,\n    volume_mt\nFROM petroverse.bdc_data\nWHERE month = 1 AND year = 2024\nORDER BY volume_liters DESC\nLIMIT 10;\n\n-- Compare with February records\nSELECT \n    year,\n    month,\n    company_name,\n    product,\n    volume,\n    unit_type,\n    volume_liters,\n    volume_kg,\n    volume_mt\nFROM petroverse.bdc_data\nWHERE month = 2 AND year = 2024\nORDER BY volume_liters DESC\nLIMIT 10;\")",
      "Bash(dir:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Check January vs other months after correction\nWITH monthly_comparison AS (\n    SELECT \n        t.month,\n        AVG(f.volume_liters) as avg_volume,\n        COUNT(*) as record_count,\n        CASE WHEN t.month = 1 THEN ''January'' ELSE ''Other Months'' END as period_group\n    FROM petroverse.fact_bdc_transactions f\n    JOIN petroverse.time_dimension t ON f.date_id = t.date_id\n    WHERE t.year >= 2020\n    GROUP BY t.month\n)\nSELECT \n    period_group,\n    AVG(avg_volume) as avg_monthly_volume,\n    SUM(record_count) as total_records\nFROM monthly_comparison\nGROUP BY period_group;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Final verification of corrected data\nSELECT \n    ''Data Summary'' as metric,\n    COUNT(*) as total_records,\n    COUNT(DISTINCT company_id) as unique_companies,\n    MIN(t.year) || ''-'' || MAX(t.year) as year_range\nFROM petroverse.fact_bdc_transactions f\nJOIN petroverse.time_dimension t ON f.date_id = t.date_id\nUNION ALL\nSELECT \n    ''OMC Data Summary'',\n    COUNT(*),\n    COUNT(DISTINCT company_id),\n    MIN(t.year) || ''-'' || MAX(t.year)\nFROM petroverse.fact_omc_transactions f\nJOIN petroverse.time_dimension t ON f.date_id = t.date_id\nUNION ALL\nSELECT\n    ''Combined Totals'',\n    (SELECT COUNT(*) FROM petroverse.fact_bdc_transactions) + \n    (SELECT COUNT(*) FROM petroverse.fact_omc_transactions),\n    (SELECT COUNT(DISTINCT company_id) FROM petroverse.fact_bdc_transactions) +\n    (SELECT COUNT(DISTINCT company_id) FROM petroverse.fact_omc_transactions),\n    ''Complete''\nORDER BY metric;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Verify no double counting for EVERSTONE and ADINKRA\nSELECT \n    c.company_name,\n    c.company_type,\n    COUNT(CASE WHEN f_bdc.transaction_id IS NOT NULL THEN 1 END) as bdc_records,\n    COUNT(CASE WHEN f_omc.transaction_id IS NOT NULL THEN 1 END) as omc_records,\n    SUM(COALESCE(f_bdc.volume_liters, 0) + COALESCE(f_omc.volume_liters, 0)) as total_liters\nFROM petroverse.companies c\nLEFT JOIN petroverse.fact_bdc_transactions f_bdc ON c.company_id = f_bdc.company_id\nLEFT JOIN petroverse.fact_omc_transactions f_omc ON c.company_id = f_omc.company_id\nWHERE c.company_name IN (''EVERSTONE ENERGY'', ''ADINKRA'')\nGROUP BY c.company_name, c.company_type\nORDER BY c.company_name;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Check companies table for EVERSTONE and ADINKRA\nSELECT company_name, company_type, company_id\nFROM petroverse.companies \nWHERE company_name IN (''EVERSTONE ENERGY'', ''ADINKRA'')\nORDER BY company_name;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Remove EVERSTONE and ADINKRA from OMC data since they should be BDC only\nDELETE FROM petroverse.omc_data \nWHERE company_name IN (''EVERSTONE ENERGY'', ''ADINKRA'');\n\n-- Check the deletion\nSELECT ''Records Deleted'' as action, ''OMC data cleaned'' as status;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Final verification - ensure no double counting\nSELECT \n    ''FINAL DATA VERIFICATION'' as status,\n    ''BDC: 58 companies, '' || \n    (SELECT COUNT(*) FROM petroverse.fact_bdc_transactions) || '' records'' as bdc_summary,\n    ''OMC: 206 companies, '' || \n    (SELECT COUNT(*) FROM petroverse.fact_omc_transactions) || '' records'' as omc_summary;\n\n-- Verify EVERSTONE and ADINKRA are BDC only\nSELECT \n    ''Double-Count Check'' as verification,\n    company_name,\n    ''BDC records: '' || COALESCE(bdc_count::text, ''0'') as bdc_status,\n    ''OMC records: '' || COALESCE(omc_count::text, ''0'') as omc_status\nFROM (\n    SELECT \n        c.company_name,\n        COUNT(f_bdc.transaction_id) as bdc_count,\n        COUNT(f_omc.transaction_id) as omc_count\n    FROM petroverse.companies c\n    LEFT JOIN petroverse.fact_bdc_transactions f_bdc ON c.company_id = f_bdc.company_id\n    LEFT JOIN petroverse.fact_omc_transactions f_omc ON c.company_id = f_omc.company_id\n    WHERE c.company_name IN (''EVERSTONE ENERGY'', ''ADINKRA'')\n    GROUP BY c.company_name\n) summary;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Verify database state after replacement\nSELECT ''DATABASE VERIFICATION'' as check_type;\n\nSELECT \n    ''Products'' as entity,\n    COUNT(*) as count,\n    STRING_AGG(DISTINCT product_category, '', '') as categories\nFROM petroverse.products\nUNION ALL\nSELECT \n    ''BDC Companies'',\n    COUNT(*),\n    ''All BDC'' as categories\nFROM petroverse.companies WHERE company_type = ''BDC''\nUNION ALL\nSELECT \n    ''OMC Companies'',\n    COUNT(*),\n    ''None yet'' as categories\nFROM petroverse.companies WHERE company_type = ''OMC''\nUNION ALL\nSELECT \n    ''BDC Raw Data'',\n    COUNT(*),\n    MIN(year) || ''-'' || MAX(year) as year_range\nFROM petroverse.bdc_data\nUNION ALL\nSELECT \n    ''BDC Fact Table'',\n    COUNT(*),\n    MIN(t.year) || ''-'' || MAX(t.year)\nFROM petroverse.fact_bdc_transactions f\nJOIN petroverse.time_dimension t ON f.date_id = t.date_id\nUNION ALL\nSELECT \n    ''OMC Data'',\n    COUNT(*),\n    ''Empty'' as status\nFROM petroverse.omc_data\nORDER BY entity;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Check product details\nSELECT \n    product_name,\n    product_category,\n    COUNT(f.*) as transactions,\n    SUM(f.volume_mt) as total_mt\nFROM petroverse.products p\nLEFT JOIN petroverse.fact_bdc_transactions f ON p.product_id = f.product_id\nGROUP BY p.product_id, p.product_name, p.product_category\nORDER BY p.product_category, total_mt DESC;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\nSELECT \n    p.product_category,\n    COUNT(DISTINCT p.product_name) as products,\n    SUM(f.volume_mt) as total_mt,\n    SUM(f.volume_liters)/1000000 as million_liters\nFROM petroverse.fact_bdc_transactions f\nJOIN petroverse.products p ON f.product_id = p.product_id\nGROUP BY p.product_category\nORDER BY total_mt DESC;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\nSELECT \n    ''Summary'' as report,\n    dataset,\n    companies || '' companies'' as companies,\n    products || '' products'' as products,\n    TO_CHAR(total_mt, ''FM999,999,999.00'') || '' MT'' as total_volume,\n    TO_CHAR(total_mt * 100.0 / SUM(total_mt) OVER(), ''FM999.0'') || ''%'' as market_share\nFROM (\n    SELECT \n        ''BDC'' as dataset,\n        COUNT(DISTINCT f.company_id) as companies,\n        COUNT(DISTINCT f.product_id) as products,\n        SUM(f.volume_mt) as total_mt\n    FROM petroverse.fact_bdc_transactions f\n    UNION ALL\n    SELECT \n        ''OMC'' as dataset,\n        COUNT(DISTINCT f.company_id) as companies,\n        COUNT(DISTINCT f.product_id) as products,\n        SUM(f.volume_mt) as total_mt\n    FROM petroverse.fact_omc_transactions f\n) summary\nORDER BY dataset;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\nSELECT \n    ''FINAL DATABASE STATUS'' as status,\n    dataset,\n    records || '' records'' as records,\n    companies || '' companies'' as companies,\n    TO_CHAR(total_mt, ''FM999,999,999.00'') || '' MT'' as total_volume,\n    TO_CHAR(total_mt * 100.0 / SUM(total_mt) OVER(), ''FM999.0'') || ''%'' as market_share\nFROM (\n    SELECT \n        ''BDC (preserved)'' as dataset,\n        COUNT(*) as records,\n        COUNT(DISTINCT company_id) as companies,\n        SUM(volume_mt) as total_mt\n    FROM petroverse.fact_bdc_transactions\n    UNION ALL\n    SELECT \n        ''OMC (updated)'' as dataset,\n        COUNT(*) as records,\n        COUNT(DISTINCT company_id) as companies,\n        SUM(volume_mt) as total_mt\n    FROM petroverse.fact_omc_transactions\n) summary\nORDER BY dataset;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Analyze current data structure and availability\nWITH data_summary AS (\n  SELECT \n    ''BDC Facts'' as table_name,\n    COUNT(*) as records,\n    COUNT(DISTINCT company_id) as unique_companies,\n    COUNT(DISTINCT product_id) as unique_products,\n    COUNT(DISTINCT date_id) as unique_dates,\n    MIN(volume_mt) as min_volume_mt,\n    MAX(volume_mt) as max_volume_mt,\n    AVG(volume_mt) as avg_volume_mt,\n    STDDEV(volume_mt) as stddev_volume_mt\n  FROM petroverse.fact_bdc_transactions\n  \n  UNION ALL\n  \n  SELECT \n    ''OMC Facts'',\n    COUNT(*),\n    COUNT(DISTINCT company_id),\n    COUNT(DISTINCT product_id),\n    COUNT(DISTINCT date_id),\n    MIN(volume_mt),\n    MAX(volume_mt),\n    AVG(volume_mt),\n    STDDEV(volume_mt)\n  FROM petroverse.fact_omc_transactions\n)\nSELECT * FROM data_summary;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Analyze temporal data distribution and patterns\nSELECT \n  ''Date Range Analysis'' as analysis_type,\n  MIN(t.full_date) as min_date,\n  MAX(t.full_date) as max_date,\n  COUNT(DISTINCT t.full_date) as unique_dates,\n  COUNT(DISTINCT t.year) as unique_years,\n  COUNT(DISTINCT t.month) as unique_months_total,\n  COUNT(DISTINCT CONCAT(t.year, ''-'', t.month)) as unique_year_months\nFROM petroverse.time_dimension t\nWHERE EXISTS (\n  SELECT 1 FROM petroverse.fact_bdc_transactions f WHERE f.date_id = t.date_id\n  UNION \n  SELECT 1 FROM petroverse.fact_omc_transactions f WHERE f.date_id = t.date_id\n);\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Analyze product and company distribution\nSELECT \n  ''Product Analysis'' as category,\n  p.product_name,\n  p.product_category,\n  COUNT(DISTINCT CASE WHEN c.company_type = ''BDC'' THEN c.company_id END) as bdc_companies_selling,\n  COUNT(DISTINCT CASE WHEN c.company_type = ''OMC'' THEN c.company_id END) as omc_companies_selling,\n  SUM(CASE WHEN c.company_type = ''BDC'' THEN f.volume_mt ELSE 0 END) as bdc_volume_mt,\n  SUM(CASE WHEN c.company_type = ''OMC'' THEN o.volume_mt ELSE 0 END) as omc_volume_mt,\n  COUNT(CASE WHEN c.company_type = ''BDC'' THEN f.transaction_id END) as bdc_transactions,\n  COUNT(CASE WHEN c.company_type = ''OMC'' THEN o.transaction_id END) as omc_transactions\nFROM petroverse.products p\nLEFT JOIN petroverse.fact_bdc_transactions f ON p.product_id = f.product_id\nLEFT JOIN petroverse.fact_omc_transactions o ON p.product_id = o.product_id\nLEFT JOIN petroverse.companies c ON (f.company_id = c.company_id OR o.company_id = c.company_id)\nGROUP BY p.product_name, p.product_category\nORDER BY (COALESCE(bdc_volume_mt, 0) + COALESCE(omc_volume_mt, 0)) DESC;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Analyze product and company distribution (corrected)\nWITH product_analysis AS (\n  SELECT \n    p.product_name,\n    p.product_category,\n    -- BDC data\n    COUNT(DISTINCT fb.company_id) as bdc_companies_count,\n    SUM(fb.volume_mt) as bdc_total_volume_mt,\n    COUNT(fb.transaction_id) as bdc_transaction_count,\n    AVG(fb.volume_mt) as bdc_avg_volume_per_transaction,\n    -- OMC data\n    COUNT(DISTINCT fo.company_id) as omc_companies_count,\n    SUM(fo.volume_mt) as omc_total_volume_mt,\n    COUNT(fo.transaction_id) as omc_transaction_count,\n    AVG(fo.volume_mt) as omc_avg_volume_per_transaction\n  FROM petroverse.products p\n  LEFT JOIN petroverse.fact_bdc_transactions fb ON p.product_id = fb.product_id\n  LEFT JOIN petroverse.fact_omc_transactions fo ON p.product_id = fo.product_id\n  GROUP BY p.product_name, p.product_category\n)\nSELECT \n  product_name,\n  product_category,\n  COALESCE(bdc_companies_count, 0) as bdc_companies,\n  COALESCE(omc_companies_count, 0) as omc_companies,\n  ROUND(COALESCE(bdc_total_volume_mt, 0)::numeric, 2) as bdc_volume_mt,\n  ROUND(COALESCE(omc_total_volume_mt, 0)::numeric, 2) as omc_volume_mt,\n  COALESCE(bdc_transaction_count, 0) as bdc_transactions,\n  COALESCE(omc_transaction_count, 0) as omc_transactions,\n  ROUND(COALESCE(bdc_avg_volume_per_transaction, 0)::numeric, 2) as bdc_avg_per_transaction,\n  ROUND(COALESCE(omc_avg_volume_per_transaction, 0)::numeric, 2) as omc_avg_per_transaction\nFROM product_analysis\nORDER BY (COALESCE(bdc_total_volume_mt, 0) + COALESCE(omc_total_volume_mt, 0)) DESC;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Simple product analysis\nSELECT \n  p.product_name,\n  p.product_category,\n  COUNT(*) as total_appearances\nFROM petroverse.products p\nORDER BY p.product_name;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Get basic product and company structure\nSELECT product_name, product_category FROM petroverse.products ORDER BY product_name;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Analyze company size distribution and market concentration\nWITH company_volumes AS (\n  SELECT \n    c.company_name,\n    c.company_type,\n    COALESCE(SUM(fb.volume_mt), 0) + COALESCE(SUM(fo.volume_mt), 0) as total_volume_mt,\n    COALESCE(COUNT(fb.transaction_id), 0) + COALESCE(COUNT(fo.transaction_id), 0) as total_transactions\n  FROM petroverse.companies c\n  LEFT JOIN petroverse.fact_bdc_transactions fb ON c.company_id = fb.company_id\n  LEFT JOIN petroverse.fact_omc_transactions fo ON c.company_id = fo.company_id\n  GROUP BY c.company_name, c.company_type\n)\nSELECT \n  company_type,\n  COUNT(*) as company_count,\n  ROUND(AVG(total_volume_mt)::numeric, 2) as avg_volume_mt,\n  ROUND(MIN(total_volume_mt)::numeric, 2) as min_volume_mt,\n  ROUND(MAX(total_volume_mt)::numeric, 2) as max_volume_mt,\n  ROUND(STDDEV(total_volume_mt)::numeric, 2) as stddev_volume_mt,\n  ROUND(SUM(total_volume_mt)::numeric, 2) as total_volume_mt\nFROM company_volumes\nWHERE total_volume_mt > 0\nGROUP BY company_type\nORDER BY company_type;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Analyze seasonal patterns and temporal trends\nSELECT \n  t.month,\n  t.year,\n  SUM(CASE WHEN c.company_type = ''BDC'' THEN fb.volume_mt ELSE 0 END) as bdc_volume_mt,\n  SUM(CASE WHEN c.company_type = ''OMC'' THEN fo.volume_mt ELSE 0 END) as omc_volume_mt,\n  COUNT(CASE WHEN c.company_type = ''BDC'' THEN fb.transaction_id END) as bdc_transactions,\n  COUNT(CASE WHEN c.company_type = ''OMC'' THEN fo.transaction_id END) as omc_transactions\nFROM petroverse.time_dimension t\nLEFT JOIN petroverse.fact_bdc_transactions fb ON t.date_id = fb.date_id\nLEFT JOIN petroverse.fact_omc_transactions fo ON t.date_id = fo.date_id\nLEFT JOIN petroverse.companies c ON (fb.company_id = c.company_id OR fo.company_id = c.company_id)\nWHERE (fb.transaction_id IS NOT NULL OR fo.transaction_id IS NOT NULL)\nGROUP BY t.year, t.month\nORDER BY t.year, t.month\nLIMIT 10;\n\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Analyze market concentration metrics - Herfindahl Index\nWITH company_market_share AS (\n  SELECT \n    c.company_name,\n    c.company_type,\n    SUM(CASE WHEN c.company_type = ''BDC'' THEN fb.volume_mt ELSE fo.volume_mt END) as company_volume,\n    SUM(SUM(CASE WHEN c.company_type = ''BDC'' THEN fb.volume_mt ELSE fo.volume_mt END)) \n      OVER (PARTITION BY c.company_type) as total_type_volume\n  FROM petroverse.companies c\n  LEFT JOIN petroverse.fact_bdc_transactions fb ON c.company_id = fb.company_id AND c.company_type = ''BDC''\n  LEFT JOIN petroverse.fact_omc_transactions fo ON c.company_id = fo.company_id AND c.company_type = ''OMC''\n  WHERE (fb.volume_mt IS NOT NULL OR fo.volume_mt IS NOT NULL)\n  GROUP BY c.company_name, c.company_type\n),\nmarket_shares AS (\n  SELECT \n    company_name,\n    company_type,\n    company_volume,\n    total_type_volume,\n    ROUND((company_volume / total_type_volume * 100)::numeric, 4) as market_share_pct,\n    POWER(company_volume / total_type_volume * 100, 2) as market_share_squared\n  FROM company_market_share\n  WHERE total_type_volume > 0\n)\nSELECT \n  company_type,\n  COUNT(*) as companies,\n  ROUND(SUM(market_share_squared)::numeric, 2) as herfindahl_index,\n  ROUND(MAX(market_share_pct)::numeric, 2) as largest_company_share,\n  COUNT(*) FILTER (WHERE market_share_pct >= 10) as companies_above_10pct,\n  COUNT(*) FILTER (WHERE market_share_pct >= 5) as companies_above_5pct\nFROM market_shares\nGROUP BY company_type\nORDER BY company_type;\n\")",
      "Bash(xcopy:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\nSELECT \n    p.product_name,\n    p.product_category,\n    COUNT(DISTINCT c.company_id) as supplier_count,\n    SUM(COALESCE(fb.volume_mt, 0) + COALESCE(fo.volume_mt, 0)) as total_volume,\n    COUNT(*) as supplier_relationships\nFROM petroverse.products p\nLEFT JOIN petroverse.fact_bdc_transactions fb ON p.product_id = fb.product_id\nLEFT JOIN petroverse.fact_omc_transactions fo ON p.product_id = fo.product_id\nLEFT JOIN petroverse.companies c ON COALESCE(fb.company_id, fo.company_id) = c.company_id\nLEFT JOIN petroverse.time_dimension t ON COALESCE(fb.date_id, fo.date_id) = t.date_id\nWHERE c.company_id IS NOT NULL\nGROUP BY p.product_id, p.product_name, p.product_category\nHAVING SUM(COALESCE(fb.volume_mt, 0) + COALESCE(fo.volume_mt, 0)) > 0\nORDER BY total_volume DESC\nLIMIT 5;\n\")",
      "Bash(start http://localhost:3001/dashboard/company)",
      "Bash(copy main.py+,, main.py)",
      "Bash(start http://localhost:3001/dashboard/investor)",
      "Bash(start http://localhost:3001/dashboard/bdc)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- Analyze what additional dimensions and metrics are available\nSELECT \n  ''Available Columns'' as info_type,\n  column_name,\n  data_type\nFROM information_schema.columns\nWHERE table_schema = ''petroverse'' \n  AND table_name = ''fact_bdc_transactions''\nORDER BY ordinal_position;\n\n-- Check for data quality and outlier information\nSELECT \n  ''Data Quality Metrics'' as metric_type,\n  COUNT(*) FILTER (WHERE data_quality_score IS NOT NULL) as has_quality_score,\n  COUNT(*) FILTER (WHERE is_outlier = true) as outlier_count,\n  COUNT(*) FILTER (WHERE is_outlier = false) as normal_count,\n  AVG(data_quality_score)::numeric(10,2) as avg_quality_score\nFROM petroverse.fact_bdc_transactions;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql\" -U postgres -p 5432 -d petroverse_analytics -c \"\n-- 2. Product velocity and trading patterns\nSELECT \n  ''Product Velocity'' as metric,\n  p.product_name,\n  COUNT(DISTINCT f.company_id) as companies_trading,\n  COUNT(DISTINCT t.full_date) as trading_days,\n  SUM(f.volume_mt)::numeric(10,2) as total_volume_mt,\n  (SUM(f.volume_mt) / NULLIF(COUNT(DISTINCT t.full_date), 0))::numeric(10,2) as daily_velocity_mt\nFROM petroverse.fact_bdc_transactions f\nJOIN petroverse.products p ON f.product_id = p.product_id\nJOIN petroverse.time_dimension t ON f.date_id = t.date_id\nGROUP BY p.product_name\nORDER BY daily_velocity_mt DESC\nLIMIT 8;\")",
      "Bash(mv:*)"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "C:\\PostgreSQL_Data",
      "C:\\Users\\victo\\Documents\\Data_Science_Projects"
    ]
  }
}