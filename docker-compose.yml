version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: petroverse_db
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "${DATABASE_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./data/cleaned_bdc_data.csv:/data/cleaned_bdc_data.csv
      - ./data/cleaned_omc_data.csv:/data/cleaned_omc_data.csv
      - ./data/cleaned_supply_data.csv:/data/cleaned_supply_data.csv
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
    container_name: petroverse_api
    ports:
      - "${API_PORT}:8000"
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      API_ENV: ${API_ENV}
      CORS_ORIGINS: ${CORS_ORIGINS}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./services/analytics:/app
      - ./logs:/app/logs

  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: petroverse_web
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://api:8000
      NODE_ENV: production
    depends_on:
      - api

  nginx:
    image: nginx:alpine
    container_name: petroverse_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
      - api

volumes:
  postgres_data:

networks:
  default:
    name: petroverse_network